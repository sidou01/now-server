module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateAppointment {
  count: Int!
}

type AggregateClientMessage {
  count: Int!
}

type AggregateReview {
  count: Int!
}

type AggregateService {
  count: Int!
}

type AggregateServiceMessage {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Appointment {
  id: ID!
  service: Service!
  client: User
  clientName: String
  title: String
  start: String!
  end: String!
  duration: AppointmentDuration!
  local: Boolean!
  createdTime: String!
}

type AppointmentConnection {
  pageInfo: PageInfo!
  edges: [AppointmentEdge]!
  aggregate: AggregateAppointment!
}

input AppointmentCreateInput {
  service: ServiceCreateOneWithoutAppointmentsInput!
  client: UserCreateOneWithoutAppointmentsInput
  clientName: String
  title: String
  start: String!
  end: String!
  duration: AppointmentDuration!
  local: Boolean!
  createdTime: String!
}

input AppointmentCreateManyWithoutClientInput {
  create: [AppointmentCreateWithoutClientInput!]
  connect: [AppointmentWhereUniqueInput!]
}

input AppointmentCreateManyWithoutServiceInput {
  create: [AppointmentCreateWithoutServiceInput!]
  connect: [AppointmentWhereUniqueInput!]
}

input AppointmentCreateWithoutClientInput {
  service: ServiceCreateOneWithoutAppointmentsInput!
  clientName: String
  title: String
  start: String!
  end: String!
  duration: AppointmentDuration!
  local: Boolean!
  createdTime: String!
}

input AppointmentCreateWithoutServiceInput {
  client: UserCreateOneWithoutAppointmentsInput
  clientName: String
  title: String
  start: String!
  end: String!
  duration: AppointmentDuration!
  local: Boolean!
  createdTime: String!
}

enum AppointmentDuration {
  VERY_SHORT
  SHORT
  LONG
  VERY_LONG
}

type AppointmentEdge {
  node: Appointment!
  cursor: String!
}

enum AppointmentOrderByInput {
  id_ASC
  id_DESC
  clientName_ASC
  clientName_DESC
  title_ASC
  title_DESC
  start_ASC
  start_DESC
  end_ASC
  end_DESC
  duration_ASC
  duration_DESC
  local_ASC
  local_DESC
  createdTime_ASC
  createdTime_DESC
}

type AppointmentPreviousValues {
  id: ID!
  clientName: String
  title: String
  start: String!
  end: String!
  duration: AppointmentDuration!
  local: Boolean!
  createdTime: String!
}

input AppointmentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  clientName: String
  clientName_not: String
  clientName_in: [String!]
  clientName_not_in: [String!]
  clientName_lt: String
  clientName_lte: String
  clientName_gt: String
  clientName_gte: String
  clientName_contains: String
  clientName_not_contains: String
  clientName_starts_with: String
  clientName_not_starts_with: String
  clientName_ends_with: String
  clientName_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  start: String
  start_not: String
  start_in: [String!]
  start_not_in: [String!]
  start_lt: String
  start_lte: String
  start_gt: String
  start_gte: String
  start_contains: String
  start_not_contains: String
  start_starts_with: String
  start_not_starts_with: String
  start_ends_with: String
  start_not_ends_with: String
  end: String
  end_not: String
  end_in: [String!]
  end_not_in: [String!]
  end_lt: String
  end_lte: String
  end_gt: String
  end_gte: String
  end_contains: String
  end_not_contains: String
  end_starts_with: String
  end_not_starts_with: String
  end_ends_with: String
  end_not_ends_with: String
  duration: AppointmentDuration
  duration_not: AppointmentDuration
  duration_in: [AppointmentDuration!]
  duration_not_in: [AppointmentDuration!]
  local: Boolean
  local_not: Boolean
  createdTime: String
  createdTime_not: String
  createdTime_in: [String!]
  createdTime_not_in: [String!]
  createdTime_lt: String
  createdTime_lte: String
  createdTime_gt: String
  createdTime_gte: String
  createdTime_contains: String
  createdTime_not_contains: String
  createdTime_starts_with: String
  createdTime_not_starts_with: String
  createdTime_ends_with: String
  createdTime_not_ends_with: String
  AND: [AppointmentScalarWhereInput!]
  OR: [AppointmentScalarWhereInput!]
  NOT: [AppointmentScalarWhereInput!]
}

type AppointmentSubscriptionPayload {
  mutation: MutationType!
  node: Appointment
  updatedFields: [String!]
  previousValues: AppointmentPreviousValues
}

input AppointmentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AppointmentWhereInput
  AND: [AppointmentSubscriptionWhereInput!]
  OR: [AppointmentSubscriptionWhereInput!]
  NOT: [AppointmentSubscriptionWhereInput!]
}

input AppointmentUpdateInput {
  service: ServiceUpdateOneRequiredWithoutAppointmentsInput
  client: UserUpdateOneWithoutAppointmentsInput
  clientName: String
  title: String
  start: String
  end: String
  duration: AppointmentDuration
  local: Boolean
  createdTime: String
}

input AppointmentUpdateManyDataInput {
  clientName: String
  title: String
  start: String
  end: String
  duration: AppointmentDuration
  local: Boolean
  createdTime: String
}

input AppointmentUpdateManyMutationInput {
  clientName: String
  title: String
  start: String
  end: String
  duration: AppointmentDuration
  local: Boolean
  createdTime: String
}

input AppointmentUpdateManyWithoutClientInput {
  create: [AppointmentCreateWithoutClientInput!]
  delete: [AppointmentWhereUniqueInput!]
  connect: [AppointmentWhereUniqueInput!]
  set: [AppointmentWhereUniqueInput!]
  disconnect: [AppointmentWhereUniqueInput!]
  update: [AppointmentUpdateWithWhereUniqueWithoutClientInput!]
  upsert: [AppointmentUpsertWithWhereUniqueWithoutClientInput!]
  deleteMany: [AppointmentScalarWhereInput!]
  updateMany: [AppointmentUpdateManyWithWhereNestedInput!]
}

input AppointmentUpdateManyWithoutServiceInput {
  create: [AppointmentCreateWithoutServiceInput!]
  delete: [AppointmentWhereUniqueInput!]
  connect: [AppointmentWhereUniqueInput!]
  set: [AppointmentWhereUniqueInput!]
  disconnect: [AppointmentWhereUniqueInput!]
  update: [AppointmentUpdateWithWhereUniqueWithoutServiceInput!]
  upsert: [AppointmentUpsertWithWhereUniqueWithoutServiceInput!]
  deleteMany: [AppointmentScalarWhereInput!]
  updateMany: [AppointmentUpdateManyWithWhereNestedInput!]
}

input AppointmentUpdateManyWithWhereNestedInput {
  where: AppointmentScalarWhereInput!
  data: AppointmentUpdateManyDataInput!
}

input AppointmentUpdateWithoutClientDataInput {
  service: ServiceUpdateOneRequiredWithoutAppointmentsInput
  clientName: String
  title: String
  start: String
  end: String
  duration: AppointmentDuration
  local: Boolean
  createdTime: String
}

input AppointmentUpdateWithoutServiceDataInput {
  client: UserUpdateOneWithoutAppointmentsInput
  clientName: String
  title: String
  start: String
  end: String
  duration: AppointmentDuration
  local: Boolean
  createdTime: String
}

input AppointmentUpdateWithWhereUniqueWithoutClientInput {
  where: AppointmentWhereUniqueInput!
  data: AppointmentUpdateWithoutClientDataInput!
}

input AppointmentUpdateWithWhereUniqueWithoutServiceInput {
  where: AppointmentWhereUniqueInput!
  data: AppointmentUpdateWithoutServiceDataInput!
}

input AppointmentUpsertWithWhereUniqueWithoutClientInput {
  where: AppointmentWhereUniqueInput!
  update: AppointmentUpdateWithoutClientDataInput!
  create: AppointmentCreateWithoutClientInput!
}

input AppointmentUpsertWithWhereUniqueWithoutServiceInput {
  where: AppointmentWhereUniqueInput!
  update: AppointmentUpdateWithoutServiceDataInput!
  create: AppointmentCreateWithoutServiceInput!
}

input AppointmentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  service: ServiceWhereInput
  client: UserWhereInput
  clientName: String
  clientName_not: String
  clientName_in: [String!]
  clientName_not_in: [String!]
  clientName_lt: String
  clientName_lte: String
  clientName_gt: String
  clientName_gte: String
  clientName_contains: String
  clientName_not_contains: String
  clientName_starts_with: String
  clientName_not_starts_with: String
  clientName_ends_with: String
  clientName_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  start: String
  start_not: String
  start_in: [String!]
  start_not_in: [String!]
  start_lt: String
  start_lte: String
  start_gt: String
  start_gte: String
  start_contains: String
  start_not_contains: String
  start_starts_with: String
  start_not_starts_with: String
  start_ends_with: String
  start_not_ends_with: String
  end: String
  end_not: String
  end_in: [String!]
  end_not_in: [String!]
  end_lt: String
  end_lte: String
  end_gt: String
  end_gte: String
  end_contains: String
  end_not_contains: String
  end_starts_with: String
  end_not_starts_with: String
  end_ends_with: String
  end_not_ends_with: String
  duration: AppointmentDuration
  duration_not: AppointmentDuration
  duration_in: [AppointmentDuration!]
  duration_not_in: [AppointmentDuration!]
  local: Boolean
  local_not: Boolean
  createdTime: String
  createdTime_not: String
  createdTime_in: [String!]
  createdTime_not_in: [String!]
  createdTime_lt: String
  createdTime_lte: String
  createdTime_gt: String
  createdTime_gte: String
  createdTime_contains: String
  createdTime_not_contains: String
  createdTime_starts_with: String
  createdTime_not_starts_with: String
  createdTime_ends_with: String
  createdTime_not_ends_with: String
  AND: [AppointmentWhereInput!]
  OR: [AppointmentWhereInput!]
  NOT: [AppointmentWhereInput!]
}

input AppointmentWhereUniqueInput {
  id: ID
  start: String
  end: String
}

type BatchPayload {
  count: Long!
}

type ClientMessage {
  id: ID!
  sender: User!
  reciever: Service!
  subject: String!
  body: String!
}

type ClientMessageConnection {
  pageInfo: PageInfo!
  edges: [ClientMessageEdge]!
  aggregate: AggregateClientMessage!
}

input ClientMessageCreateInput {
  sender: UserCreateOneWithoutSentMessagesInput!
  reciever: ServiceCreateOneWithoutRecievedMessagesInput!
  subject: String!
  body: String!
}

input ClientMessageCreateManyWithoutRecieverInput {
  create: [ClientMessageCreateWithoutRecieverInput!]
  connect: [ClientMessageWhereUniqueInput!]
}

input ClientMessageCreateManyWithoutSenderInput {
  create: [ClientMessageCreateWithoutSenderInput!]
  connect: [ClientMessageWhereUniqueInput!]
}

input ClientMessageCreateWithoutRecieverInput {
  sender: UserCreateOneWithoutSentMessagesInput!
  subject: String!
  body: String!
}

input ClientMessageCreateWithoutSenderInput {
  reciever: ServiceCreateOneWithoutRecievedMessagesInput!
  subject: String!
  body: String!
}

type ClientMessageEdge {
  node: ClientMessage!
  cursor: String!
}

enum ClientMessageOrderByInput {
  id_ASC
  id_DESC
  subject_ASC
  subject_DESC
  body_ASC
  body_DESC
}

type ClientMessagePreviousValues {
  id: ID!
  subject: String!
  body: String!
}

input ClientMessageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  subject: String
  subject_not: String
  subject_in: [String!]
  subject_not_in: [String!]
  subject_lt: String
  subject_lte: String
  subject_gt: String
  subject_gte: String
  subject_contains: String
  subject_not_contains: String
  subject_starts_with: String
  subject_not_starts_with: String
  subject_ends_with: String
  subject_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  AND: [ClientMessageScalarWhereInput!]
  OR: [ClientMessageScalarWhereInput!]
  NOT: [ClientMessageScalarWhereInput!]
}

type ClientMessageSubscriptionPayload {
  mutation: MutationType!
  node: ClientMessage
  updatedFields: [String!]
  previousValues: ClientMessagePreviousValues
}

input ClientMessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ClientMessageWhereInput
  AND: [ClientMessageSubscriptionWhereInput!]
  OR: [ClientMessageSubscriptionWhereInput!]
  NOT: [ClientMessageSubscriptionWhereInput!]
}

input ClientMessageUpdateInput {
  sender: UserUpdateOneRequiredWithoutSentMessagesInput
  reciever: ServiceUpdateOneRequiredWithoutRecievedMessagesInput
  subject: String
  body: String
}

input ClientMessageUpdateManyDataInput {
  subject: String
  body: String
}

input ClientMessageUpdateManyMutationInput {
  subject: String
  body: String
}

input ClientMessageUpdateManyWithoutRecieverInput {
  create: [ClientMessageCreateWithoutRecieverInput!]
  delete: [ClientMessageWhereUniqueInput!]
  connect: [ClientMessageWhereUniqueInput!]
  set: [ClientMessageWhereUniqueInput!]
  disconnect: [ClientMessageWhereUniqueInput!]
  update: [ClientMessageUpdateWithWhereUniqueWithoutRecieverInput!]
  upsert: [ClientMessageUpsertWithWhereUniqueWithoutRecieverInput!]
  deleteMany: [ClientMessageScalarWhereInput!]
  updateMany: [ClientMessageUpdateManyWithWhereNestedInput!]
}

input ClientMessageUpdateManyWithoutSenderInput {
  create: [ClientMessageCreateWithoutSenderInput!]
  delete: [ClientMessageWhereUniqueInput!]
  connect: [ClientMessageWhereUniqueInput!]
  set: [ClientMessageWhereUniqueInput!]
  disconnect: [ClientMessageWhereUniqueInput!]
  update: [ClientMessageUpdateWithWhereUniqueWithoutSenderInput!]
  upsert: [ClientMessageUpsertWithWhereUniqueWithoutSenderInput!]
  deleteMany: [ClientMessageScalarWhereInput!]
  updateMany: [ClientMessageUpdateManyWithWhereNestedInput!]
}

input ClientMessageUpdateManyWithWhereNestedInput {
  where: ClientMessageScalarWhereInput!
  data: ClientMessageUpdateManyDataInput!
}

input ClientMessageUpdateWithoutRecieverDataInput {
  sender: UserUpdateOneRequiredWithoutSentMessagesInput
  subject: String
  body: String
}

input ClientMessageUpdateWithoutSenderDataInput {
  reciever: ServiceUpdateOneRequiredWithoutRecievedMessagesInput
  subject: String
  body: String
}

input ClientMessageUpdateWithWhereUniqueWithoutRecieverInput {
  where: ClientMessageWhereUniqueInput!
  data: ClientMessageUpdateWithoutRecieverDataInput!
}

input ClientMessageUpdateWithWhereUniqueWithoutSenderInput {
  where: ClientMessageWhereUniqueInput!
  data: ClientMessageUpdateWithoutSenderDataInput!
}

input ClientMessageUpsertWithWhereUniqueWithoutRecieverInput {
  where: ClientMessageWhereUniqueInput!
  update: ClientMessageUpdateWithoutRecieverDataInput!
  create: ClientMessageCreateWithoutRecieverInput!
}

input ClientMessageUpsertWithWhereUniqueWithoutSenderInput {
  where: ClientMessageWhereUniqueInput!
  update: ClientMessageUpdateWithoutSenderDataInput!
  create: ClientMessageCreateWithoutSenderInput!
}

input ClientMessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sender: UserWhereInput
  reciever: ServiceWhereInput
  subject: String
  subject_not: String
  subject_in: [String!]
  subject_not_in: [String!]
  subject_lt: String
  subject_lte: String
  subject_gt: String
  subject_gte: String
  subject_contains: String
  subject_not_contains: String
  subject_starts_with: String
  subject_not_starts_with: String
  subject_ends_with: String
  subject_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  AND: [ClientMessageWhereInput!]
  OR: [ClientMessageWhereInput!]
  NOT: [ClientMessageWhereInput!]
}

input ClientMessageWhereUniqueInput {
  id: ID
}

enum DoctorField {
  Generaliste
  Psychiatre
  Psychologue
  Dermatologue
  Dentiste
  Gynecologue
}

enum Gender {
  MALE
  FEMALE
}

enum LawyerField {
  Bankruptcy_Law
  Corporate_Law
  Civil_Rights_Law
  Criminal_Law
  Family_Law
}

scalar Long

type Mutation {
  createAppointment(data: AppointmentCreateInput!): Appointment!
  updateAppointment(data: AppointmentUpdateInput!, where: AppointmentWhereUniqueInput!): Appointment
  updateManyAppointments(data: AppointmentUpdateManyMutationInput!, where: AppointmentWhereInput): BatchPayload!
  upsertAppointment(where: AppointmentWhereUniqueInput!, create: AppointmentCreateInput!, update: AppointmentUpdateInput!): Appointment!
  deleteAppointment(where: AppointmentWhereUniqueInput!): Appointment
  deleteManyAppointments(where: AppointmentWhereInput): BatchPayload!
  createClientMessage(data: ClientMessageCreateInput!): ClientMessage!
  updateClientMessage(data: ClientMessageUpdateInput!, where: ClientMessageWhereUniqueInput!): ClientMessage
  updateManyClientMessages(data: ClientMessageUpdateManyMutationInput!, where: ClientMessageWhereInput): BatchPayload!
  upsertClientMessage(where: ClientMessageWhereUniqueInput!, create: ClientMessageCreateInput!, update: ClientMessageUpdateInput!): ClientMessage!
  deleteClientMessage(where: ClientMessageWhereUniqueInput!): ClientMessage
  deleteManyClientMessages(where: ClientMessageWhereInput): BatchPayload!
  createReview(data: ReviewCreateInput!): Review!
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateManyReviews(data: ReviewUpdateManyMutationInput!, where: ReviewWhereInput): BatchPayload!
  upsertReview(where: ReviewWhereUniqueInput!, create: ReviewCreateInput!, update: ReviewUpdateInput!): Review!
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteManyReviews(where: ReviewWhereInput): BatchPayload!
  createService(data: ServiceCreateInput!): Service!
  updateService(data: ServiceUpdateInput!, where: ServiceWhereUniqueInput!): Service
  updateManyServices(data: ServiceUpdateManyMutationInput!, where: ServiceWhereInput): BatchPayload!
  upsertService(where: ServiceWhereUniqueInput!, create: ServiceCreateInput!, update: ServiceUpdateInput!): Service!
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteManyServices(where: ServiceWhereInput): BatchPayload!
  createServiceMessage(data: ServiceMessageCreateInput!): ServiceMessage!
  updateServiceMessage(data: ServiceMessageUpdateInput!, where: ServiceMessageWhereUniqueInput!): ServiceMessage
  updateManyServiceMessages(data: ServiceMessageUpdateManyMutationInput!, where: ServiceMessageWhereInput): BatchPayload!
  upsertServiceMessage(where: ServiceMessageWhereUniqueInput!, create: ServiceMessageCreateInput!, update: ServiceMessageUpdateInput!): ServiceMessage!
  deleteServiceMessage(where: ServiceMessageWhereUniqueInput!): ServiceMessage
  deleteManyServiceMessages(where: ServiceMessageWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  appointment(where: AppointmentWhereUniqueInput!): Appointment
  appointments(where: AppointmentWhereInput, orderBy: AppointmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Appointment]!
  appointmentsConnection(where: AppointmentWhereInput, orderBy: AppointmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AppointmentConnection!
  clientMessage(where: ClientMessageWhereUniqueInput!): ClientMessage
  clientMessages(where: ClientMessageWhereInput, orderBy: ClientMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ClientMessage]!
  clientMessagesConnection(where: ClientMessageWhereInput, orderBy: ClientMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClientMessageConnection!
  review(where: ReviewWhereUniqueInput!): Review
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review]!
  reviewsConnection(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReviewConnection!
  service(where: ServiceWhereUniqueInput!): Service
  services(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Service]!
  servicesConnection(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ServiceConnection!
  serviceMessage(where: ServiceMessageWhereUniqueInput!): ServiceMessage
  serviceMessages(where: ServiceMessageWhereInput, orderBy: ServiceMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ServiceMessage]!
  serviceMessagesConnection(where: ServiceMessageWhereInput, orderBy: ServiceMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ServiceMessageConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Review {
  id: ID!
  user: User!
  service: Service!
  title: String!
  content: String!
  rating: Int!
}

type ReviewConnection {
  pageInfo: PageInfo!
  edges: [ReviewEdge]!
  aggregate: AggregateReview!
}

input ReviewCreateInput {
  user: UserCreateOneWithoutReviewsInput!
  service: ServiceCreateOneWithoutReviewsInput!
  title: String!
  content: String!
  rating: Int!
}

input ReviewCreateManyWithoutServiceInput {
  create: [ReviewCreateWithoutServiceInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateManyWithoutUserInput {
  create: [ReviewCreateWithoutUserInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateWithoutServiceInput {
  user: UserCreateOneWithoutReviewsInput!
  title: String!
  content: String!
  rating: Int!
}

input ReviewCreateWithoutUserInput {
  service: ServiceCreateOneWithoutReviewsInput!
  title: String!
  content: String!
  rating: Int!
}

type ReviewEdge {
  node: Review!
  cursor: String!
}

enum ReviewOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
  rating_ASC
  rating_DESC
}

type ReviewPreviousValues {
  id: ID!
  title: String!
  content: String!
  rating: Int!
}

input ReviewScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  rating: Int
  rating_not: Int
  rating_in: [Int!]
  rating_not_in: [Int!]
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  AND: [ReviewScalarWhereInput!]
  OR: [ReviewScalarWhereInput!]
  NOT: [ReviewScalarWhereInput!]
}

type ReviewSubscriptionPayload {
  mutation: MutationType!
  node: Review
  updatedFields: [String!]
  previousValues: ReviewPreviousValues
}

input ReviewSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReviewWhereInput
  AND: [ReviewSubscriptionWhereInput!]
  OR: [ReviewSubscriptionWhereInput!]
  NOT: [ReviewSubscriptionWhereInput!]
}

input ReviewUpdateInput {
  user: UserUpdateOneRequiredWithoutReviewsInput
  service: ServiceUpdateOneRequiredWithoutReviewsInput
  title: String
  content: String
  rating: Int
}

input ReviewUpdateManyDataInput {
  title: String
  content: String
  rating: Int
}

input ReviewUpdateManyMutationInput {
  title: String
  content: String
  rating: Int
}

input ReviewUpdateManyWithoutServiceInput {
  create: [ReviewCreateWithoutServiceInput!]
  delete: [ReviewWhereUniqueInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutServiceInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutServiceInput!]
  deleteMany: [ReviewScalarWhereInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
}

input ReviewUpdateManyWithoutUserInput {
  create: [ReviewCreateWithoutUserInput!]
  delete: [ReviewWhereUniqueInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ReviewScalarWhereInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
}

input ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput!
  data: ReviewUpdateManyDataInput!
}

input ReviewUpdateWithoutServiceDataInput {
  user: UserUpdateOneRequiredWithoutReviewsInput
  title: String
  content: String
  rating: Int
}

input ReviewUpdateWithoutUserDataInput {
  service: ServiceUpdateOneRequiredWithoutReviewsInput
  title: String
  content: String
  rating: Int
}

input ReviewUpdateWithWhereUniqueWithoutServiceInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutServiceDataInput!
}

input ReviewUpdateWithWhereUniqueWithoutUserInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutUserDataInput!
}

input ReviewUpsertWithWhereUniqueWithoutServiceInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutServiceDataInput!
  create: ReviewCreateWithoutServiceInput!
}

input ReviewUpsertWithWhereUniqueWithoutUserInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutUserDataInput!
  create: ReviewCreateWithoutUserInput!
}

input ReviewWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  service: ServiceWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  rating: Int
  rating_not: Int
  rating_in: [Int!]
  rating_not_in: [Int!]
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
}

input ReviewWhereUniqueInput {
  id: ID
}

type Service {
  id: ID!
  fullName: String!
  Bio: String
  email: String!
  password: String!
  age: Int
  phone: Int
  address: String
  gender: Gender
  avatar: String
  appointments(where: AppointmentWhereInput, orderBy: AppointmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Appointment!]
  sentMessages(where: ServiceMessageWhereInput, orderBy: ServiceMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ServiceMessage!]
  recievedMessages(where: ClientMessageWhereInput, orderBy: ClientMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ClientMessage!]
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  office_hours: String
  education: String
  serviceType: ServiceType!
  doctorField: DoctorField
  lawyerField: LawyerField
  likes: Int!
  rating: Float!
}

type ServiceConnection {
  pageInfo: PageInfo!
  edges: [ServiceEdge]!
  aggregate: AggregateService!
}

input ServiceCreateInput {
  fullName: String!
  Bio: String
  email: String!
  password: String!
  age: Int
  phone: Int
  address: String
  gender: Gender
  avatar: String
  appointments: AppointmentCreateManyWithoutServiceInput
  sentMessages: ServiceMessageCreateManyWithoutSenderInput
  recievedMessages: ClientMessageCreateManyWithoutRecieverInput
  reviews: ReviewCreateManyWithoutServiceInput
  office_hours: String
  education: String
  serviceType: ServiceType!
  doctorField: DoctorField
  lawyerField: LawyerField
  likes: Int!
  rating: Float!
}

input ServiceCreateOneWithoutAppointmentsInput {
  create: ServiceCreateWithoutAppointmentsInput
  connect: ServiceWhereUniqueInput
}

input ServiceCreateOneWithoutRecievedMessagesInput {
  create: ServiceCreateWithoutRecievedMessagesInput
  connect: ServiceWhereUniqueInput
}

input ServiceCreateOneWithoutReviewsInput {
  create: ServiceCreateWithoutReviewsInput
  connect: ServiceWhereUniqueInput
}

input ServiceCreateOneWithoutSentMessagesInput {
  create: ServiceCreateWithoutSentMessagesInput
  connect: ServiceWhereUniqueInput
}

input ServiceCreateWithoutAppointmentsInput {
  fullName: String!
  Bio: String
  email: String!
  password: String!
  age: Int
  phone: Int
  address: String
  gender: Gender
  avatar: String
  sentMessages: ServiceMessageCreateManyWithoutSenderInput
  recievedMessages: ClientMessageCreateManyWithoutRecieverInput
  reviews: ReviewCreateManyWithoutServiceInput
  office_hours: String
  education: String
  serviceType: ServiceType!
  doctorField: DoctorField
  lawyerField: LawyerField
  likes: Int!
  rating: Float!
}

input ServiceCreateWithoutRecievedMessagesInput {
  fullName: String!
  Bio: String
  email: String!
  password: String!
  age: Int
  phone: Int
  address: String
  gender: Gender
  avatar: String
  appointments: AppointmentCreateManyWithoutServiceInput
  sentMessages: ServiceMessageCreateManyWithoutSenderInput
  reviews: ReviewCreateManyWithoutServiceInput
  office_hours: String
  education: String
  serviceType: ServiceType!
  doctorField: DoctorField
  lawyerField: LawyerField
  likes: Int!
  rating: Float!
}

input ServiceCreateWithoutReviewsInput {
  fullName: String!
  Bio: String
  email: String!
  password: String!
  age: Int
  phone: Int
  address: String
  gender: Gender
  avatar: String
  appointments: AppointmentCreateManyWithoutServiceInput
  sentMessages: ServiceMessageCreateManyWithoutSenderInput
  recievedMessages: ClientMessageCreateManyWithoutRecieverInput
  office_hours: String
  education: String
  serviceType: ServiceType!
  doctorField: DoctorField
  lawyerField: LawyerField
  likes: Int!
  rating: Float!
}

input ServiceCreateWithoutSentMessagesInput {
  fullName: String!
  Bio: String
  email: String!
  password: String!
  age: Int
  phone: Int
  address: String
  gender: Gender
  avatar: String
  appointments: AppointmentCreateManyWithoutServiceInput
  recievedMessages: ClientMessageCreateManyWithoutRecieverInput
  reviews: ReviewCreateManyWithoutServiceInput
  office_hours: String
  education: String
  serviceType: ServiceType!
  doctorField: DoctorField
  lawyerField: LawyerField
  likes: Int!
  rating: Float!
}

type ServiceEdge {
  node: Service!
  cursor: String!
}

type ServiceMessage {
  id: ID!
  sender: Service!
  reciever: User!
  subject: String!
  body: String!
}

type ServiceMessageConnection {
  pageInfo: PageInfo!
  edges: [ServiceMessageEdge]!
  aggregate: AggregateServiceMessage!
}

input ServiceMessageCreateInput {
  sender: ServiceCreateOneWithoutSentMessagesInput!
  reciever: UserCreateOneWithoutRecievedMessagesInput!
  subject: String!
  body: String!
}

input ServiceMessageCreateManyWithoutRecieverInput {
  create: [ServiceMessageCreateWithoutRecieverInput!]
  connect: [ServiceMessageWhereUniqueInput!]
}

input ServiceMessageCreateManyWithoutSenderInput {
  create: [ServiceMessageCreateWithoutSenderInput!]
  connect: [ServiceMessageWhereUniqueInput!]
}

input ServiceMessageCreateWithoutRecieverInput {
  sender: ServiceCreateOneWithoutSentMessagesInput!
  subject: String!
  body: String!
}

input ServiceMessageCreateWithoutSenderInput {
  reciever: UserCreateOneWithoutRecievedMessagesInput!
  subject: String!
  body: String!
}

type ServiceMessageEdge {
  node: ServiceMessage!
  cursor: String!
}

enum ServiceMessageOrderByInput {
  id_ASC
  id_DESC
  subject_ASC
  subject_DESC
  body_ASC
  body_DESC
}

type ServiceMessagePreviousValues {
  id: ID!
  subject: String!
  body: String!
}

input ServiceMessageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  subject: String
  subject_not: String
  subject_in: [String!]
  subject_not_in: [String!]
  subject_lt: String
  subject_lte: String
  subject_gt: String
  subject_gte: String
  subject_contains: String
  subject_not_contains: String
  subject_starts_with: String
  subject_not_starts_with: String
  subject_ends_with: String
  subject_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  AND: [ServiceMessageScalarWhereInput!]
  OR: [ServiceMessageScalarWhereInput!]
  NOT: [ServiceMessageScalarWhereInput!]
}

type ServiceMessageSubscriptionPayload {
  mutation: MutationType!
  node: ServiceMessage
  updatedFields: [String!]
  previousValues: ServiceMessagePreviousValues
}

input ServiceMessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ServiceMessageWhereInput
  AND: [ServiceMessageSubscriptionWhereInput!]
  OR: [ServiceMessageSubscriptionWhereInput!]
  NOT: [ServiceMessageSubscriptionWhereInput!]
}

input ServiceMessageUpdateInput {
  sender: ServiceUpdateOneRequiredWithoutSentMessagesInput
  reciever: UserUpdateOneRequiredWithoutRecievedMessagesInput
  subject: String
  body: String
}

input ServiceMessageUpdateManyDataInput {
  subject: String
  body: String
}

input ServiceMessageUpdateManyMutationInput {
  subject: String
  body: String
}

input ServiceMessageUpdateManyWithoutRecieverInput {
  create: [ServiceMessageCreateWithoutRecieverInput!]
  delete: [ServiceMessageWhereUniqueInput!]
  connect: [ServiceMessageWhereUniqueInput!]
  set: [ServiceMessageWhereUniqueInput!]
  disconnect: [ServiceMessageWhereUniqueInput!]
  update: [ServiceMessageUpdateWithWhereUniqueWithoutRecieverInput!]
  upsert: [ServiceMessageUpsertWithWhereUniqueWithoutRecieverInput!]
  deleteMany: [ServiceMessageScalarWhereInput!]
  updateMany: [ServiceMessageUpdateManyWithWhereNestedInput!]
}

input ServiceMessageUpdateManyWithoutSenderInput {
  create: [ServiceMessageCreateWithoutSenderInput!]
  delete: [ServiceMessageWhereUniqueInput!]
  connect: [ServiceMessageWhereUniqueInput!]
  set: [ServiceMessageWhereUniqueInput!]
  disconnect: [ServiceMessageWhereUniqueInput!]
  update: [ServiceMessageUpdateWithWhereUniqueWithoutSenderInput!]
  upsert: [ServiceMessageUpsertWithWhereUniqueWithoutSenderInput!]
  deleteMany: [ServiceMessageScalarWhereInput!]
  updateMany: [ServiceMessageUpdateManyWithWhereNestedInput!]
}

input ServiceMessageUpdateManyWithWhereNestedInput {
  where: ServiceMessageScalarWhereInput!
  data: ServiceMessageUpdateManyDataInput!
}

input ServiceMessageUpdateWithoutRecieverDataInput {
  sender: ServiceUpdateOneRequiredWithoutSentMessagesInput
  subject: String
  body: String
}

input ServiceMessageUpdateWithoutSenderDataInput {
  reciever: UserUpdateOneRequiredWithoutRecievedMessagesInput
  subject: String
  body: String
}

input ServiceMessageUpdateWithWhereUniqueWithoutRecieverInput {
  where: ServiceMessageWhereUniqueInput!
  data: ServiceMessageUpdateWithoutRecieverDataInput!
}

input ServiceMessageUpdateWithWhereUniqueWithoutSenderInput {
  where: ServiceMessageWhereUniqueInput!
  data: ServiceMessageUpdateWithoutSenderDataInput!
}

input ServiceMessageUpsertWithWhereUniqueWithoutRecieverInput {
  where: ServiceMessageWhereUniqueInput!
  update: ServiceMessageUpdateWithoutRecieverDataInput!
  create: ServiceMessageCreateWithoutRecieverInput!
}

input ServiceMessageUpsertWithWhereUniqueWithoutSenderInput {
  where: ServiceMessageWhereUniqueInput!
  update: ServiceMessageUpdateWithoutSenderDataInput!
  create: ServiceMessageCreateWithoutSenderInput!
}

input ServiceMessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sender: ServiceWhereInput
  reciever: UserWhereInput
  subject: String
  subject_not: String
  subject_in: [String!]
  subject_not_in: [String!]
  subject_lt: String
  subject_lte: String
  subject_gt: String
  subject_gte: String
  subject_contains: String
  subject_not_contains: String
  subject_starts_with: String
  subject_not_starts_with: String
  subject_ends_with: String
  subject_not_ends_with: String
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  AND: [ServiceMessageWhereInput!]
  OR: [ServiceMessageWhereInput!]
  NOT: [ServiceMessageWhereInput!]
}

input ServiceMessageWhereUniqueInput {
  id: ID
}

enum ServiceOrderByInput {
  id_ASC
  id_DESC
  fullName_ASC
  fullName_DESC
  Bio_ASC
  Bio_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  age_ASC
  age_DESC
  phone_ASC
  phone_DESC
  address_ASC
  address_DESC
  gender_ASC
  gender_DESC
  avatar_ASC
  avatar_DESC
  office_hours_ASC
  office_hours_DESC
  education_ASC
  education_DESC
  serviceType_ASC
  serviceType_DESC
  doctorField_ASC
  doctorField_DESC
  lawyerField_ASC
  lawyerField_DESC
  likes_ASC
  likes_DESC
  rating_ASC
  rating_DESC
}

type ServicePreviousValues {
  id: ID!
  fullName: String!
  Bio: String
  email: String!
  password: String!
  age: Int
  phone: Int
  address: String
  gender: Gender
  avatar: String
  office_hours: String
  education: String
  serviceType: ServiceType!
  doctorField: DoctorField
  lawyerField: LawyerField
  likes: Int!
  rating: Float!
}

type ServiceSubscriptionPayload {
  mutation: MutationType!
  node: Service
  updatedFields: [String!]
  previousValues: ServicePreviousValues
}

input ServiceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ServiceWhereInput
  AND: [ServiceSubscriptionWhereInput!]
  OR: [ServiceSubscriptionWhereInput!]
  NOT: [ServiceSubscriptionWhereInput!]
}

enum ServiceType {
  Doctor
  Lawyer
}

input ServiceUpdateInput {
  fullName: String
  Bio: String
  email: String
  password: String
  age: Int
  phone: Int
  address: String
  gender: Gender
  avatar: String
  appointments: AppointmentUpdateManyWithoutServiceInput
  sentMessages: ServiceMessageUpdateManyWithoutSenderInput
  recievedMessages: ClientMessageUpdateManyWithoutRecieverInput
  reviews: ReviewUpdateManyWithoutServiceInput
  office_hours: String
  education: String
  serviceType: ServiceType
  doctorField: DoctorField
  lawyerField: LawyerField
  likes: Int
  rating: Float
}

input ServiceUpdateManyMutationInput {
  fullName: String
  Bio: String
  email: String
  password: String
  age: Int
  phone: Int
  address: String
  gender: Gender
  avatar: String
  office_hours: String
  education: String
  serviceType: ServiceType
  doctorField: DoctorField
  lawyerField: LawyerField
  likes: Int
  rating: Float
}

input ServiceUpdateOneRequiredWithoutAppointmentsInput {
  create: ServiceCreateWithoutAppointmentsInput
  update: ServiceUpdateWithoutAppointmentsDataInput
  upsert: ServiceUpsertWithoutAppointmentsInput
  connect: ServiceWhereUniqueInput
}

input ServiceUpdateOneRequiredWithoutRecievedMessagesInput {
  create: ServiceCreateWithoutRecievedMessagesInput
  update: ServiceUpdateWithoutRecievedMessagesDataInput
  upsert: ServiceUpsertWithoutRecievedMessagesInput
  connect: ServiceWhereUniqueInput
}

input ServiceUpdateOneRequiredWithoutReviewsInput {
  create: ServiceCreateWithoutReviewsInput
  update: ServiceUpdateWithoutReviewsDataInput
  upsert: ServiceUpsertWithoutReviewsInput
  connect: ServiceWhereUniqueInput
}

input ServiceUpdateOneRequiredWithoutSentMessagesInput {
  create: ServiceCreateWithoutSentMessagesInput
  update: ServiceUpdateWithoutSentMessagesDataInput
  upsert: ServiceUpsertWithoutSentMessagesInput
  connect: ServiceWhereUniqueInput
}

input ServiceUpdateWithoutAppointmentsDataInput {
  fullName: String
  Bio: String
  email: String
  password: String
  age: Int
  phone: Int
  address: String
  gender: Gender
  avatar: String
  sentMessages: ServiceMessageUpdateManyWithoutSenderInput
  recievedMessages: ClientMessageUpdateManyWithoutRecieverInput
  reviews: ReviewUpdateManyWithoutServiceInput
  office_hours: String
  education: String
  serviceType: ServiceType
  doctorField: DoctorField
  lawyerField: LawyerField
  likes: Int
  rating: Float
}

input ServiceUpdateWithoutRecievedMessagesDataInput {
  fullName: String
  Bio: String
  email: String
  password: String
  age: Int
  phone: Int
  address: String
  gender: Gender
  avatar: String
  appointments: AppointmentUpdateManyWithoutServiceInput
  sentMessages: ServiceMessageUpdateManyWithoutSenderInput
  reviews: ReviewUpdateManyWithoutServiceInput
  office_hours: String
  education: String
  serviceType: ServiceType
  doctorField: DoctorField
  lawyerField: LawyerField
  likes: Int
  rating: Float
}

input ServiceUpdateWithoutReviewsDataInput {
  fullName: String
  Bio: String
  email: String
  password: String
  age: Int
  phone: Int
  address: String
  gender: Gender
  avatar: String
  appointments: AppointmentUpdateManyWithoutServiceInput
  sentMessages: ServiceMessageUpdateManyWithoutSenderInput
  recievedMessages: ClientMessageUpdateManyWithoutRecieverInput
  office_hours: String
  education: String
  serviceType: ServiceType
  doctorField: DoctorField
  lawyerField: LawyerField
  likes: Int
  rating: Float
}

input ServiceUpdateWithoutSentMessagesDataInput {
  fullName: String
  Bio: String
  email: String
  password: String
  age: Int
  phone: Int
  address: String
  gender: Gender
  avatar: String
  appointments: AppointmentUpdateManyWithoutServiceInput
  recievedMessages: ClientMessageUpdateManyWithoutRecieverInput
  reviews: ReviewUpdateManyWithoutServiceInput
  office_hours: String
  education: String
  serviceType: ServiceType
  doctorField: DoctorField
  lawyerField: LawyerField
  likes: Int
  rating: Float
}

input ServiceUpsertWithoutAppointmentsInput {
  update: ServiceUpdateWithoutAppointmentsDataInput!
  create: ServiceCreateWithoutAppointmentsInput!
}

input ServiceUpsertWithoutRecievedMessagesInput {
  update: ServiceUpdateWithoutRecievedMessagesDataInput!
  create: ServiceCreateWithoutRecievedMessagesInput!
}

input ServiceUpsertWithoutReviewsInput {
  update: ServiceUpdateWithoutReviewsDataInput!
  create: ServiceCreateWithoutReviewsInput!
}

input ServiceUpsertWithoutSentMessagesInput {
  update: ServiceUpdateWithoutSentMessagesDataInput!
  create: ServiceCreateWithoutSentMessagesInput!
}

input ServiceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  fullName: String
  fullName_not: String
  fullName_in: [String!]
  fullName_not_in: [String!]
  fullName_lt: String
  fullName_lte: String
  fullName_gt: String
  fullName_gte: String
  fullName_contains: String
  fullName_not_contains: String
  fullName_starts_with: String
  fullName_not_starts_with: String
  fullName_ends_with: String
  fullName_not_ends_with: String
  Bio: String
  Bio_not: String
  Bio_in: [String!]
  Bio_not_in: [String!]
  Bio_lt: String
  Bio_lte: String
  Bio_gt: String
  Bio_gte: String
  Bio_contains: String
  Bio_not_contains: String
  Bio_starts_with: String
  Bio_not_starts_with: String
  Bio_ends_with: String
  Bio_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  age: Int
  age_not: Int
  age_in: [Int!]
  age_not_in: [Int!]
  age_lt: Int
  age_lte: Int
  age_gt: Int
  age_gte: Int
  phone: Int
  phone_not: Int
  phone_in: [Int!]
  phone_not_in: [Int!]
  phone_lt: Int
  phone_lte: Int
  phone_gt: Int
  phone_gte: Int
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  gender: Gender
  gender_not: Gender
  gender_in: [Gender!]
  gender_not_in: [Gender!]
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  appointments_every: AppointmentWhereInput
  appointments_some: AppointmentWhereInput
  appointments_none: AppointmentWhereInput
  sentMessages_every: ServiceMessageWhereInput
  sentMessages_some: ServiceMessageWhereInput
  sentMessages_none: ServiceMessageWhereInput
  recievedMessages_every: ClientMessageWhereInput
  recievedMessages_some: ClientMessageWhereInput
  recievedMessages_none: ClientMessageWhereInput
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
  office_hours: String
  office_hours_not: String
  office_hours_in: [String!]
  office_hours_not_in: [String!]
  office_hours_lt: String
  office_hours_lte: String
  office_hours_gt: String
  office_hours_gte: String
  office_hours_contains: String
  office_hours_not_contains: String
  office_hours_starts_with: String
  office_hours_not_starts_with: String
  office_hours_ends_with: String
  office_hours_not_ends_with: String
  education: String
  education_not: String
  education_in: [String!]
  education_not_in: [String!]
  education_lt: String
  education_lte: String
  education_gt: String
  education_gte: String
  education_contains: String
  education_not_contains: String
  education_starts_with: String
  education_not_starts_with: String
  education_ends_with: String
  education_not_ends_with: String
  serviceType: ServiceType
  serviceType_not: ServiceType
  serviceType_in: [ServiceType!]
  serviceType_not_in: [ServiceType!]
  doctorField: DoctorField
  doctorField_not: DoctorField
  doctorField_in: [DoctorField!]
  doctorField_not_in: [DoctorField!]
  lawyerField: LawyerField
  lawyerField_not: LawyerField
  lawyerField_in: [LawyerField!]
  lawyerField_not_in: [LawyerField!]
  likes: Int
  likes_not: Int
  likes_in: [Int!]
  likes_not_in: [Int!]
  likes_lt: Int
  likes_lte: Int
  likes_gt: Int
  likes_gte: Int
  rating: Float
  rating_not: Float
  rating_in: [Float!]
  rating_not_in: [Float!]
  rating_lt: Float
  rating_lte: Float
  rating_gt: Float
  rating_gte: Float
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
}

input ServiceWhereUniqueInput {
  id: ID
  email: String
}

type Subscription {
  appointment(where: AppointmentSubscriptionWhereInput): AppointmentSubscriptionPayload
  clientMessage(where: ClientMessageSubscriptionWhereInput): ClientMessageSubscriptionPayload
  review(where: ReviewSubscriptionWhereInput): ReviewSubscriptionPayload
  service(where: ServiceSubscriptionWhereInput): ServiceSubscriptionPayload
  serviceMessage(where: ServiceMessageSubscriptionWhereInput): ServiceMessageSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  fullName: String!
  email: String!
  password: String!
  age: Int!
  phone: Int
  gender: Gender
  avatar: String
  confirmation: Boolean!
  sentMessages(where: ClientMessageWhereInput, orderBy: ClientMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ClientMessage!]
  recievedMessages(where: ServiceMessageWhereInput, orderBy: ServiceMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ServiceMessage!]
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  appointments(where: AppointmentWhereInput, orderBy: AppointmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Appointment!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  fullName: String!
  email: String!
  password: String!
  age: Int!
  phone: Int
  gender: Gender
  avatar: String
  confirmation: Boolean
  sentMessages: ClientMessageCreateManyWithoutSenderInput
  recievedMessages: ServiceMessageCreateManyWithoutRecieverInput
  reviews: ReviewCreateManyWithoutUserInput
  appointments: AppointmentCreateManyWithoutClientInput
}

input UserCreateOneWithoutAppointmentsInput {
  create: UserCreateWithoutAppointmentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRecievedMessagesInput {
  create: UserCreateWithoutRecievedMessagesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSentMessagesInput {
  create: UserCreateWithoutSentMessagesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAppointmentsInput {
  fullName: String!
  email: String!
  password: String!
  age: Int!
  phone: Int
  gender: Gender
  avatar: String
  confirmation: Boolean
  sentMessages: ClientMessageCreateManyWithoutSenderInput
  recievedMessages: ServiceMessageCreateManyWithoutRecieverInput
  reviews: ReviewCreateManyWithoutUserInput
}

input UserCreateWithoutRecievedMessagesInput {
  fullName: String!
  email: String!
  password: String!
  age: Int!
  phone: Int
  gender: Gender
  avatar: String
  confirmation: Boolean
  sentMessages: ClientMessageCreateManyWithoutSenderInput
  reviews: ReviewCreateManyWithoutUserInput
  appointments: AppointmentCreateManyWithoutClientInput
}

input UserCreateWithoutReviewsInput {
  fullName: String!
  email: String!
  password: String!
  age: Int!
  phone: Int
  gender: Gender
  avatar: String
  confirmation: Boolean
  sentMessages: ClientMessageCreateManyWithoutSenderInput
  recievedMessages: ServiceMessageCreateManyWithoutRecieverInput
  appointments: AppointmentCreateManyWithoutClientInput
}

input UserCreateWithoutSentMessagesInput {
  fullName: String!
  email: String!
  password: String!
  age: Int!
  phone: Int
  gender: Gender
  avatar: String
  confirmation: Boolean
  recievedMessages: ServiceMessageCreateManyWithoutRecieverInput
  reviews: ReviewCreateManyWithoutUserInput
  appointments: AppointmentCreateManyWithoutClientInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  fullName_ASC
  fullName_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  age_ASC
  age_DESC
  phone_ASC
  phone_DESC
  gender_ASC
  gender_DESC
  avatar_ASC
  avatar_DESC
  confirmation_ASC
  confirmation_DESC
}

type UserPreviousValues {
  id: ID!
  fullName: String!
  email: String!
  password: String!
  age: Int!
  phone: Int
  gender: Gender
  avatar: String
  confirmation: Boolean!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  fullName: String
  email: String
  password: String
  age: Int
  phone: Int
  gender: Gender
  avatar: String
  confirmation: Boolean
  sentMessages: ClientMessageUpdateManyWithoutSenderInput
  recievedMessages: ServiceMessageUpdateManyWithoutRecieverInput
  reviews: ReviewUpdateManyWithoutUserInput
  appointments: AppointmentUpdateManyWithoutClientInput
}

input UserUpdateManyMutationInput {
  fullName: String
  email: String
  password: String
  age: Int
  phone: Int
  gender: Gender
  avatar: String
  confirmation: Boolean
}

input UserUpdateOneRequiredWithoutRecievedMessagesInput {
  create: UserCreateWithoutRecievedMessagesInput
  update: UserUpdateWithoutRecievedMessagesDataInput
  upsert: UserUpsertWithoutRecievedMessagesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  update: UserUpdateWithoutReviewsDataInput
  upsert: UserUpsertWithoutReviewsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutSentMessagesInput {
  create: UserCreateWithoutSentMessagesInput
  update: UserUpdateWithoutSentMessagesDataInput
  upsert: UserUpsertWithoutSentMessagesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutAppointmentsInput {
  create: UserCreateWithoutAppointmentsInput
  update: UserUpdateWithoutAppointmentsDataInput
  upsert: UserUpsertWithoutAppointmentsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutAppointmentsDataInput {
  fullName: String
  email: String
  password: String
  age: Int
  phone: Int
  gender: Gender
  avatar: String
  confirmation: Boolean
  sentMessages: ClientMessageUpdateManyWithoutSenderInput
  recievedMessages: ServiceMessageUpdateManyWithoutRecieverInput
  reviews: ReviewUpdateManyWithoutUserInput
}

input UserUpdateWithoutRecievedMessagesDataInput {
  fullName: String
  email: String
  password: String
  age: Int
  phone: Int
  gender: Gender
  avatar: String
  confirmation: Boolean
  sentMessages: ClientMessageUpdateManyWithoutSenderInput
  reviews: ReviewUpdateManyWithoutUserInput
  appointments: AppointmentUpdateManyWithoutClientInput
}

input UserUpdateWithoutReviewsDataInput {
  fullName: String
  email: String
  password: String
  age: Int
  phone: Int
  gender: Gender
  avatar: String
  confirmation: Boolean
  sentMessages: ClientMessageUpdateManyWithoutSenderInput
  recievedMessages: ServiceMessageUpdateManyWithoutRecieverInput
  appointments: AppointmentUpdateManyWithoutClientInput
}

input UserUpdateWithoutSentMessagesDataInput {
  fullName: String
  email: String
  password: String
  age: Int
  phone: Int
  gender: Gender
  avatar: String
  confirmation: Boolean
  recievedMessages: ServiceMessageUpdateManyWithoutRecieverInput
  reviews: ReviewUpdateManyWithoutUserInput
  appointments: AppointmentUpdateManyWithoutClientInput
}

input UserUpsertWithoutAppointmentsInput {
  update: UserUpdateWithoutAppointmentsDataInput!
  create: UserCreateWithoutAppointmentsInput!
}

input UserUpsertWithoutRecievedMessagesInput {
  update: UserUpdateWithoutRecievedMessagesDataInput!
  create: UserCreateWithoutRecievedMessagesInput!
}

input UserUpsertWithoutReviewsInput {
  update: UserUpdateWithoutReviewsDataInput!
  create: UserCreateWithoutReviewsInput!
}

input UserUpsertWithoutSentMessagesInput {
  update: UserUpdateWithoutSentMessagesDataInput!
  create: UserCreateWithoutSentMessagesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  fullName: String
  fullName_not: String
  fullName_in: [String!]
  fullName_not_in: [String!]
  fullName_lt: String
  fullName_lte: String
  fullName_gt: String
  fullName_gte: String
  fullName_contains: String
  fullName_not_contains: String
  fullName_starts_with: String
  fullName_not_starts_with: String
  fullName_ends_with: String
  fullName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  age: Int
  age_not: Int
  age_in: [Int!]
  age_not_in: [Int!]
  age_lt: Int
  age_lte: Int
  age_gt: Int
  age_gte: Int
  phone: Int
  phone_not: Int
  phone_in: [Int!]
  phone_not_in: [Int!]
  phone_lt: Int
  phone_lte: Int
  phone_gt: Int
  phone_gte: Int
  gender: Gender
  gender_not: Gender
  gender_in: [Gender!]
  gender_not_in: [Gender!]
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  confirmation: Boolean
  confirmation_not: Boolean
  sentMessages_every: ClientMessageWhereInput
  sentMessages_some: ClientMessageWhereInput
  sentMessages_none: ClientMessageWhereInput
  recievedMessages_every: ServiceMessageWhereInput
  recievedMessages_some: ServiceMessageWhereInput
  recievedMessages_none: ServiceMessageWhereInput
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
  appointments_every: AppointmentWhereInput
  appointments_some: AppointmentWhereInput
  appointments_none: AppointmentWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    