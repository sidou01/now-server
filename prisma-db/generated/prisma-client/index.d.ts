// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  appointment: (where?: AppointmentWhereInput) => Promise<boolean>;
  clientMessage: (where?: ClientMessageWhereInput) => Promise<boolean>;
  review: (where?: ReviewWhereInput) => Promise<boolean>;
  service: (where?: ServiceWhereInput) => Promise<boolean>;
  serviceMessage: (where?: ServiceMessageWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  appointment: (
    where: AppointmentWhereUniqueInput
  ) => AppointmentNullablePromise;
  appointments: (args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Appointment>;
  appointmentsConnection: (args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AppointmentConnectionPromise;
  clientMessage: (
    where: ClientMessageWhereUniqueInput
  ) => ClientMessageNullablePromise;
  clientMessages: (args?: {
    where?: ClientMessageWhereInput;
    orderBy?: ClientMessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ClientMessage>;
  clientMessagesConnection: (args?: {
    where?: ClientMessageWhereInput;
    orderBy?: ClientMessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClientMessageConnectionPromise;
  review: (where: ReviewWhereUniqueInput) => ReviewNullablePromise;
  reviews: (args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Review>;
  reviewsConnection: (args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReviewConnectionPromise;
  service: (where: ServiceWhereUniqueInput) => ServiceNullablePromise;
  services: (args?: {
    where?: ServiceWhereInput;
    orderBy?: ServiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Service>;
  servicesConnection: (args?: {
    where?: ServiceWhereInput;
    orderBy?: ServiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ServiceConnectionPromise;
  serviceMessage: (
    where: ServiceMessageWhereUniqueInput
  ) => ServiceMessageNullablePromise;
  serviceMessages: (args?: {
    where?: ServiceMessageWhereInput;
    orderBy?: ServiceMessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ServiceMessage>;
  serviceMessagesConnection: (args?: {
    where?: ServiceMessageWhereInput;
    orderBy?: ServiceMessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ServiceMessageConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAppointment: (data: AppointmentCreateInput) => AppointmentPromise;
  updateAppointment: (args: {
    data: AppointmentUpdateInput;
    where: AppointmentWhereUniqueInput;
  }) => AppointmentPromise;
  updateManyAppointments: (args: {
    data: AppointmentUpdateManyMutationInput;
    where?: AppointmentWhereInput;
  }) => BatchPayloadPromise;
  upsertAppointment: (args: {
    where: AppointmentWhereUniqueInput;
    create: AppointmentCreateInput;
    update: AppointmentUpdateInput;
  }) => AppointmentPromise;
  deleteAppointment: (where: AppointmentWhereUniqueInput) => AppointmentPromise;
  deleteManyAppointments: (
    where?: AppointmentWhereInput
  ) => BatchPayloadPromise;
  createClientMessage: (data: ClientMessageCreateInput) => ClientMessagePromise;
  updateClientMessage: (args: {
    data: ClientMessageUpdateInput;
    where: ClientMessageWhereUniqueInput;
  }) => ClientMessagePromise;
  updateManyClientMessages: (args: {
    data: ClientMessageUpdateManyMutationInput;
    where?: ClientMessageWhereInput;
  }) => BatchPayloadPromise;
  upsertClientMessage: (args: {
    where: ClientMessageWhereUniqueInput;
    create: ClientMessageCreateInput;
    update: ClientMessageUpdateInput;
  }) => ClientMessagePromise;
  deleteClientMessage: (
    where: ClientMessageWhereUniqueInput
  ) => ClientMessagePromise;
  deleteManyClientMessages: (
    where?: ClientMessageWhereInput
  ) => BatchPayloadPromise;
  createReview: (data: ReviewCreateInput) => ReviewPromise;
  updateReview: (args: {
    data: ReviewUpdateInput;
    where: ReviewWhereUniqueInput;
  }) => ReviewPromise;
  updateManyReviews: (args: {
    data: ReviewUpdateManyMutationInput;
    where?: ReviewWhereInput;
  }) => BatchPayloadPromise;
  upsertReview: (args: {
    where: ReviewWhereUniqueInput;
    create: ReviewCreateInput;
    update: ReviewUpdateInput;
  }) => ReviewPromise;
  deleteReview: (where: ReviewWhereUniqueInput) => ReviewPromise;
  deleteManyReviews: (where?: ReviewWhereInput) => BatchPayloadPromise;
  createService: (data: ServiceCreateInput) => ServicePromise;
  updateService: (args: {
    data: ServiceUpdateInput;
    where: ServiceWhereUniqueInput;
  }) => ServicePromise;
  updateManyServices: (args: {
    data: ServiceUpdateManyMutationInput;
    where?: ServiceWhereInput;
  }) => BatchPayloadPromise;
  upsertService: (args: {
    where: ServiceWhereUniqueInput;
    create: ServiceCreateInput;
    update: ServiceUpdateInput;
  }) => ServicePromise;
  deleteService: (where: ServiceWhereUniqueInput) => ServicePromise;
  deleteManyServices: (where?: ServiceWhereInput) => BatchPayloadPromise;
  createServiceMessage: (
    data: ServiceMessageCreateInput
  ) => ServiceMessagePromise;
  updateServiceMessage: (args: {
    data: ServiceMessageUpdateInput;
    where: ServiceMessageWhereUniqueInput;
  }) => ServiceMessagePromise;
  updateManyServiceMessages: (args: {
    data: ServiceMessageUpdateManyMutationInput;
    where?: ServiceMessageWhereInput;
  }) => BatchPayloadPromise;
  upsertServiceMessage: (args: {
    where: ServiceMessageWhereUniqueInput;
    create: ServiceMessageCreateInput;
    update: ServiceMessageUpdateInput;
  }) => ServiceMessagePromise;
  deleteServiceMessage: (
    where: ServiceMessageWhereUniqueInput
  ) => ServiceMessagePromise;
  deleteManyServiceMessages: (
    where?: ServiceMessageWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  appointment: (
    where?: AppointmentSubscriptionWhereInput
  ) => AppointmentSubscriptionPayloadSubscription;
  clientMessage: (
    where?: ClientMessageSubscriptionWhereInput
  ) => ClientMessageSubscriptionPayloadSubscription;
  review: (
    where?: ReviewSubscriptionWhereInput
  ) => ReviewSubscriptionPayloadSubscription;
  service: (
    where?: ServiceSubscriptionWhereInput
  ) => ServiceSubscriptionPayloadSubscription;
  serviceMessage: (
    where?: ServiceMessageSubscriptionWhereInput
  ) => ServiceMessageSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ClientMessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "subject_ASC"
  | "subject_DESC"
  | "body_ASC"
  | "body_DESC";

export type ServiceType = "Doctor" | "Lawyer";

export type ServiceMessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "subject_ASC"
  | "subject_DESC"
  | "body_ASC"
  | "body_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fullName_ASC"
  | "fullName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "age_ASC"
  | "age_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "confirmation_ASC"
  | "confirmation_DESC";

export type DoctorField =
  | "Generaliste"
  | "Psychiatre"
  | "Psychologue"
  | "Dermatologue"
  | "Dentiste"
  | "Gynecologue";

export type LawyerField =
  | "Bankruptcy_Law"
  | "Corporate_Law"
  | "Civil_Rights_Law"
  | "Criminal_Law"
  | "Family_Law";

export type AppointmentDuration = "VERY_SHORT" | "SHORT" | "LONG" | "VERY_LONG";

export type AppointmentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "clientName_ASC"
  | "clientName_DESC"
  | "title_ASC"
  | "title_DESC"
  | "startTime_ASC"
  | "startTime_DESC"
  | "endTime_ASC"
  | "endTime_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "local_ASC"
  | "local_DESC"
  | "createdTime_ASC"
  | "createdTime_DESC";

export type ServiceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fullName_ASC"
  | "fullName_DESC"
  | "Bio_ASC"
  | "Bio_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "age_ASC"
  | "age_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "address_ASC"
  | "address_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "office_hours_ASC"
  | "office_hours_DESC"
  | "education_ASC"
  | "education_DESC"
  | "serviceType_ASC"
  | "serviceType_DESC"
  | "doctorField_ASC"
  | "doctorField_DESC"
  | "lawyerField_ASC"
  | "lawyerField_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type Gender = "MALE" | "FEMALE";

export type ReviewOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC"
  | "rating_ASC"
  | "rating_DESC";

export interface ClientMessageUpdateWithoutSenderDataInput {
  reciever?: Maybe<ServiceUpdateOneRequiredWithoutRecievedMessagesInput>;
  subject?: Maybe<String>;
  body?: Maybe<String>;
}

export type AppointmentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  startTime?: Maybe<String>;
  endTime?: Maybe<String>;
}>;

export interface UserUpdateWithoutAppointmentsDataInput {
  fullName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  age?: Maybe<Int>;
  phone?: Maybe<Int>;
  gender?: Maybe<Gender>;
  avatar?: Maybe<String>;
  confirmation?: Maybe<Boolean>;
  sentMessages?: Maybe<ClientMessageUpdateManyWithoutSenderInput>;
  recievedMessages?: Maybe<ServiceMessageUpdateManyWithoutRecieverInput>;
  reviews?: Maybe<ReviewUpdateManyWithoutUserInput>;
}

export interface ReviewWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  service?: Maybe<ServiceWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  AND?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
  OR?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
  NOT?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
}

export interface ReviewCreateWithoutServiceInput {
  user: UserCreateOneWithoutReviewsInput;
  title: String;
  content: String;
  rating: Int;
}

export interface AppointmentUpsertWithWhereUniqueWithoutServiceInput {
  where: AppointmentWhereUniqueInput;
  update: AppointmentUpdateWithoutServiceDataInput;
  create: AppointmentCreateWithoutServiceInput;
}

export interface UserCreateOneWithoutReviewsInput {
  create?: Maybe<UserCreateWithoutReviewsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ServiceMessageUpdateManyWithoutRecieverInput {
  create?: Maybe<
    | ServiceMessageCreateWithoutRecieverInput[]
    | ServiceMessageCreateWithoutRecieverInput
  >;
  delete?: Maybe<
    ServiceMessageWhereUniqueInput[] | ServiceMessageWhereUniqueInput
  >;
  connect?: Maybe<
    ServiceMessageWhereUniqueInput[] | ServiceMessageWhereUniqueInput
  >;
  set?: Maybe<
    ServiceMessageWhereUniqueInput[] | ServiceMessageWhereUniqueInput
  >;
  disconnect?: Maybe<
    ServiceMessageWhereUniqueInput[] | ServiceMessageWhereUniqueInput
  >;
  update?: Maybe<
    | ServiceMessageUpdateWithWhereUniqueWithoutRecieverInput[]
    | ServiceMessageUpdateWithWhereUniqueWithoutRecieverInput
  >;
  upsert?: Maybe<
    | ServiceMessageUpsertWithWhereUniqueWithoutRecieverInput[]
    | ServiceMessageUpsertWithWhereUniqueWithoutRecieverInput
  >;
  deleteMany?: Maybe<
    ServiceMessageScalarWhereInput[] | ServiceMessageScalarWhereInput
  >;
  updateMany?: Maybe<
    | ServiceMessageUpdateManyWithWhereNestedInput[]
    | ServiceMessageUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateWithoutReviewsInput {
  fullName: String;
  email: String;
  password: String;
  age: Int;
  phone?: Maybe<Int>;
  gender?: Maybe<Gender>;
  avatar?: Maybe<String>;
  confirmation?: Maybe<Boolean>;
  sentMessages?: Maybe<ClientMessageCreateManyWithoutSenderInput>;
  recievedMessages?: Maybe<ServiceMessageCreateManyWithoutRecieverInput>;
  appointments?: Maybe<AppointmentCreateManyWithoutClientInput>;
}

export interface ServiceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  fullName?: Maybe<String>;
  fullName_not?: Maybe<String>;
  fullName_in?: Maybe<String[] | String>;
  fullName_not_in?: Maybe<String[] | String>;
  fullName_lt?: Maybe<String>;
  fullName_lte?: Maybe<String>;
  fullName_gt?: Maybe<String>;
  fullName_gte?: Maybe<String>;
  fullName_contains?: Maybe<String>;
  fullName_not_contains?: Maybe<String>;
  fullName_starts_with?: Maybe<String>;
  fullName_not_starts_with?: Maybe<String>;
  fullName_ends_with?: Maybe<String>;
  fullName_not_ends_with?: Maybe<String>;
  Bio?: Maybe<String>;
  Bio_not?: Maybe<String>;
  Bio_in?: Maybe<String[] | String>;
  Bio_not_in?: Maybe<String[] | String>;
  Bio_lt?: Maybe<String>;
  Bio_lte?: Maybe<String>;
  Bio_gt?: Maybe<String>;
  Bio_gte?: Maybe<String>;
  Bio_contains?: Maybe<String>;
  Bio_not_contains?: Maybe<String>;
  Bio_starts_with?: Maybe<String>;
  Bio_not_starts_with?: Maybe<String>;
  Bio_ends_with?: Maybe<String>;
  Bio_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  age?: Maybe<Int>;
  age_not?: Maybe<Int>;
  age_in?: Maybe<Int[] | Int>;
  age_not_in?: Maybe<Int[] | Int>;
  age_lt?: Maybe<Int>;
  age_lte?: Maybe<Int>;
  age_gt?: Maybe<Int>;
  age_gte?: Maybe<Int>;
  phone?: Maybe<Int>;
  phone_not?: Maybe<Int>;
  phone_in?: Maybe<Int[] | Int>;
  phone_not_in?: Maybe<Int[] | Int>;
  phone_lt?: Maybe<Int>;
  phone_lte?: Maybe<Int>;
  phone_gt?: Maybe<Int>;
  phone_gte?: Maybe<Int>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  gender?: Maybe<Gender>;
  gender_not?: Maybe<Gender>;
  gender_in?: Maybe<Gender[] | Gender>;
  gender_not_in?: Maybe<Gender[] | Gender>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  appointments_every?: Maybe<AppointmentWhereInput>;
  appointments_some?: Maybe<AppointmentWhereInput>;
  appointments_none?: Maybe<AppointmentWhereInput>;
  sentMessages_every?: Maybe<ServiceMessageWhereInput>;
  sentMessages_some?: Maybe<ServiceMessageWhereInput>;
  sentMessages_none?: Maybe<ServiceMessageWhereInput>;
  recievedMessages_every?: Maybe<ClientMessageWhereInput>;
  recievedMessages_some?: Maybe<ClientMessageWhereInput>;
  recievedMessages_none?: Maybe<ClientMessageWhereInput>;
  reviews_every?: Maybe<ReviewWhereInput>;
  reviews_some?: Maybe<ReviewWhereInput>;
  reviews_none?: Maybe<ReviewWhereInput>;
  office_hours?: Maybe<String>;
  office_hours_not?: Maybe<String>;
  office_hours_in?: Maybe<String[] | String>;
  office_hours_not_in?: Maybe<String[] | String>;
  office_hours_lt?: Maybe<String>;
  office_hours_lte?: Maybe<String>;
  office_hours_gt?: Maybe<String>;
  office_hours_gte?: Maybe<String>;
  office_hours_contains?: Maybe<String>;
  office_hours_not_contains?: Maybe<String>;
  office_hours_starts_with?: Maybe<String>;
  office_hours_not_starts_with?: Maybe<String>;
  office_hours_ends_with?: Maybe<String>;
  office_hours_not_ends_with?: Maybe<String>;
  education?: Maybe<String>;
  education_not?: Maybe<String>;
  education_in?: Maybe<String[] | String>;
  education_not_in?: Maybe<String[] | String>;
  education_lt?: Maybe<String>;
  education_lte?: Maybe<String>;
  education_gt?: Maybe<String>;
  education_gte?: Maybe<String>;
  education_contains?: Maybe<String>;
  education_not_contains?: Maybe<String>;
  education_starts_with?: Maybe<String>;
  education_not_starts_with?: Maybe<String>;
  education_ends_with?: Maybe<String>;
  education_not_ends_with?: Maybe<String>;
  serviceType?: Maybe<ServiceType>;
  serviceType_not?: Maybe<ServiceType>;
  serviceType_in?: Maybe<ServiceType[] | ServiceType>;
  serviceType_not_in?: Maybe<ServiceType[] | ServiceType>;
  doctorField?: Maybe<DoctorField>;
  doctorField_not?: Maybe<DoctorField>;
  doctorField_in?: Maybe<DoctorField[] | DoctorField>;
  doctorField_not_in?: Maybe<DoctorField[] | DoctorField>;
  lawyerField?: Maybe<LawyerField>;
  lawyerField_not?: Maybe<LawyerField>;
  lawyerField_in?: Maybe<LawyerField[] | LawyerField>;
  lawyerField_not_in?: Maybe<LawyerField[] | LawyerField>;
  AND?: Maybe<ServiceWhereInput[] | ServiceWhereInput>;
  OR?: Maybe<ServiceWhereInput[] | ServiceWhereInput>;
  NOT?: Maybe<ServiceWhereInput[] | ServiceWhereInput>;
}

export interface AppointmentUpdateInput {
  service?: Maybe<ServiceUpdateOneRequiredWithoutAppointmentsInput>;
  client?: Maybe<UserUpdateOneWithoutAppointmentsInput>;
  clientName?: Maybe<String>;
  title?: Maybe<String>;
  startTime?: Maybe<String>;
  endTime?: Maybe<String>;
  duration?: Maybe<AppointmentDuration>;
  local?: Maybe<Boolean>;
  createdTime?: Maybe<String>;
}

export interface ServiceMessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ServiceMessageWhereInput>;
  AND?: Maybe<
    | ServiceMessageSubscriptionWhereInput[]
    | ServiceMessageSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ServiceMessageSubscriptionWhereInput[]
    | ServiceMessageSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ServiceMessageSubscriptionWhereInput[]
    | ServiceMessageSubscriptionWhereInput
  >;
}

export interface ServiceUpdateOneRequiredWithoutAppointmentsInput {
  create?: Maybe<ServiceCreateWithoutAppointmentsInput>;
  update?: Maybe<ServiceUpdateWithoutAppointmentsDataInput>;
  upsert?: Maybe<ServiceUpsertWithoutAppointmentsInput>;
  connect?: Maybe<ServiceWhereUniqueInput>;
}

export interface ServiceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ServiceWhereInput>;
  AND?: Maybe<ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput>;
  OR?: Maybe<ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput>;
  NOT?: Maybe<ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput>;
}

export interface ServiceUpdateWithoutAppointmentsDataInput {
  fullName?: Maybe<String>;
  Bio?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  age?: Maybe<Int>;
  phone?: Maybe<Int>;
  address?: Maybe<String>;
  gender?: Maybe<Gender>;
  avatar?: Maybe<String>;
  sentMessages?: Maybe<ServiceMessageUpdateManyWithoutSenderInput>;
  recievedMessages?: Maybe<ClientMessageUpdateManyWithoutRecieverInput>;
  reviews?: Maybe<ReviewUpdateManyWithoutServiceInput>;
  office_hours?: Maybe<String>;
  education?: Maybe<String>;
  serviceType?: Maybe<ServiceType>;
  doctorField?: Maybe<DoctorField>;
  lawyerField?: Maybe<LawyerField>;
}

export interface ClientMessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ClientMessageWhereInput>;
  AND?: Maybe<
    ClientMessageSubscriptionWhereInput[] | ClientMessageSubscriptionWhereInput
  >;
  OR?: Maybe<
    ClientMessageSubscriptionWhereInput[] | ClientMessageSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ClientMessageSubscriptionWhereInput[] | ClientMessageSubscriptionWhereInput
  >;
}

export interface ServiceMessageUpdateManyWithoutSenderInput {
  create?: Maybe<
    | ServiceMessageCreateWithoutSenderInput[]
    | ServiceMessageCreateWithoutSenderInput
  >;
  delete?: Maybe<
    ServiceMessageWhereUniqueInput[] | ServiceMessageWhereUniqueInput
  >;
  connect?: Maybe<
    ServiceMessageWhereUniqueInput[] | ServiceMessageWhereUniqueInput
  >;
  set?: Maybe<
    ServiceMessageWhereUniqueInput[] | ServiceMessageWhereUniqueInput
  >;
  disconnect?: Maybe<
    ServiceMessageWhereUniqueInput[] | ServiceMessageWhereUniqueInput
  >;
  update?: Maybe<
    | ServiceMessageUpdateWithWhereUniqueWithoutSenderInput[]
    | ServiceMessageUpdateWithWhereUniqueWithoutSenderInput
  >;
  upsert?: Maybe<
    | ServiceMessageUpsertWithWhereUniqueWithoutSenderInput[]
    | ServiceMessageUpsertWithWhereUniqueWithoutSenderInput
  >;
  deleteMany?: Maybe<
    ServiceMessageScalarWhereInput[] | ServiceMessageScalarWhereInput
  >;
  updateMany?: Maybe<
    | ServiceMessageUpdateManyWithWhereNestedInput[]
    | ServiceMessageUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateManyMutationInput {
  fullName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  age?: Maybe<Int>;
  phone?: Maybe<Int>;
  gender?: Maybe<Gender>;
  avatar?: Maybe<String>;
  confirmation?: Maybe<Boolean>;
}

export interface ServiceMessageUpdateWithWhereUniqueWithoutSenderInput {
  where: ServiceMessageWhereUniqueInput;
  data: ServiceMessageUpdateWithoutSenderDataInput;
}

export interface UserCreateInput {
  fullName: String;
  email: String;
  password: String;
  age: Int;
  phone?: Maybe<Int>;
  gender?: Maybe<Gender>;
  avatar?: Maybe<String>;
  confirmation?: Maybe<Boolean>;
  sentMessages?: Maybe<ClientMessageCreateManyWithoutSenderInput>;
  recievedMessages?: Maybe<ServiceMessageCreateManyWithoutRecieverInput>;
  reviews?: Maybe<ReviewCreateManyWithoutUserInput>;
  appointments?: Maybe<AppointmentCreateManyWithoutClientInput>;
}

export interface ServiceMessageUpdateWithoutSenderDataInput {
  reciever?: Maybe<UserUpdateOneRequiredWithoutRecievedMessagesInput>;
  subject?: Maybe<String>;
  body?: Maybe<String>;
}

export interface ServiceMessageUpdateManyMutationInput {
  subject?: Maybe<String>;
  body?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutRecievedMessagesInput {
  create?: Maybe<UserCreateWithoutRecievedMessagesInput>;
  update?: Maybe<UserUpdateWithoutRecievedMessagesDataInput>;
  upsert?: Maybe<UserUpsertWithoutRecievedMessagesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ServiceMessageCreateInput {
  sender: ServiceCreateOneWithoutSentMessagesInput;
  reciever: UserCreateOneWithoutRecievedMessagesInput;
  subject: String;
  body: String;
}

export interface UserUpdateWithoutRecievedMessagesDataInput {
  fullName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  age?: Maybe<Int>;
  phone?: Maybe<Int>;
  gender?: Maybe<Gender>;
  avatar?: Maybe<String>;
  confirmation?: Maybe<Boolean>;
  sentMessages?: Maybe<ClientMessageUpdateManyWithoutSenderInput>;
  reviews?: Maybe<ReviewUpdateManyWithoutUserInput>;
  appointments?: Maybe<AppointmentUpdateManyWithoutClientInput>;
}

export interface ServiceUpdateManyMutationInput {
  fullName?: Maybe<String>;
  Bio?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  age?: Maybe<Int>;
  phone?: Maybe<Int>;
  address?: Maybe<String>;
  gender?: Maybe<Gender>;
  avatar?: Maybe<String>;
  office_hours?: Maybe<String>;
  education?: Maybe<String>;
  serviceType?: Maybe<ServiceType>;
  doctorField?: Maybe<DoctorField>;
  lawyerField?: Maybe<LawyerField>;
}

export interface ClientMessageUpdateManyWithoutSenderInput {
  create?: Maybe<
    | ClientMessageCreateWithoutSenderInput[]
    | ClientMessageCreateWithoutSenderInput
  >;
  delete?: Maybe<
    ClientMessageWhereUniqueInput[] | ClientMessageWhereUniqueInput
  >;
  connect?: Maybe<
    ClientMessageWhereUniqueInput[] | ClientMessageWhereUniqueInput
  >;
  set?: Maybe<ClientMessageWhereUniqueInput[] | ClientMessageWhereUniqueInput>;
  disconnect?: Maybe<
    ClientMessageWhereUniqueInput[] | ClientMessageWhereUniqueInput
  >;
  update?: Maybe<
    | ClientMessageUpdateWithWhereUniqueWithoutSenderInput[]
    | ClientMessageUpdateWithWhereUniqueWithoutSenderInput
  >;
  upsert?: Maybe<
    | ClientMessageUpsertWithWhereUniqueWithoutSenderInput[]
    | ClientMessageUpsertWithWhereUniqueWithoutSenderInput
  >;
  deleteMany?: Maybe<
    ClientMessageScalarWhereInput[] | ClientMessageScalarWhereInput
  >;
  updateMany?: Maybe<
    | ClientMessageUpdateManyWithWhereNestedInput[]
    | ClientMessageUpdateManyWithWhereNestedInput
  >;
}

export interface ServiceCreateInput {
  fullName: String;
  Bio?: Maybe<String>;
  email: String;
  password: String;
  age?: Maybe<Int>;
  phone?: Maybe<Int>;
  address?: Maybe<String>;
  gender?: Maybe<Gender>;
  avatar?: Maybe<String>;
  appointments?: Maybe<AppointmentCreateManyWithoutServiceInput>;
  sentMessages?: Maybe<ServiceMessageCreateManyWithoutSenderInput>;
  recievedMessages?: Maybe<ClientMessageCreateManyWithoutRecieverInput>;
  reviews?: Maybe<ReviewCreateManyWithoutServiceInput>;
  office_hours?: Maybe<String>;
  education?: Maybe<String>;
  serviceType: ServiceType;
  doctorField?: Maybe<DoctorField>;
  lawyerField?: Maybe<LawyerField>;
}

export interface ClientMessageUpdateWithWhereUniqueWithoutSenderInput {
  where: ClientMessageWhereUniqueInput;
  data: ClientMessageUpdateWithoutSenderDataInput;
}

export interface ReviewUpdateManyMutationInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  rating?: Maybe<Int>;
}

export interface ServiceUpsertWithoutRecievedMessagesInput {
  update: ServiceUpdateWithoutRecievedMessagesDataInput;
  create: ServiceCreateWithoutRecievedMessagesInput;
}

export interface ReviewCreateInput {
  user: UserCreateOneWithoutReviewsInput;
  service: ServiceCreateOneWithoutReviewsInput;
  title: String;
  content: String;
  rating: Int;
}

export interface ServiceUpdateOneRequiredWithoutRecievedMessagesInput {
  create?: Maybe<ServiceCreateWithoutRecievedMessagesInput>;
  update?: Maybe<ServiceUpdateWithoutRecievedMessagesDataInput>;
  upsert?: Maybe<ServiceUpsertWithoutRecievedMessagesInput>;
  connect?: Maybe<ServiceWhereUniqueInput>;
}

export type ServiceMessageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ServiceUpdateWithoutRecievedMessagesDataInput {
  fullName?: Maybe<String>;
  Bio?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  age?: Maybe<Int>;
  phone?: Maybe<Int>;
  address?: Maybe<String>;
  gender?: Maybe<Gender>;
  avatar?: Maybe<String>;
  appointments?: Maybe<AppointmentUpdateManyWithoutServiceInput>;
  sentMessages?: Maybe<ServiceMessageUpdateManyWithoutSenderInput>;
  reviews?: Maybe<ReviewUpdateManyWithoutServiceInput>;
  office_hours?: Maybe<String>;
  education?: Maybe<String>;
  serviceType?: Maybe<ServiceType>;
  doctorField?: Maybe<DoctorField>;
  lawyerField?: Maybe<LawyerField>;
}

export interface ClientMessageCreateInput {
  sender: UserCreateOneWithoutSentMessagesInput;
  reciever: ServiceCreateOneWithoutRecievedMessagesInput;
  subject: String;
  body: String;
}

export interface AppointmentUpdateManyWithoutServiceInput {
  create?: Maybe<
    | AppointmentCreateWithoutServiceInput[]
    | AppointmentCreateWithoutServiceInput
  >;
  delete?: Maybe<AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput>;
  connect?: Maybe<AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput>;
  set?: Maybe<AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput>;
  disconnect?: Maybe<
    AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput
  >;
  update?: Maybe<
    | AppointmentUpdateWithWhereUniqueWithoutServiceInput[]
    | AppointmentUpdateWithWhereUniqueWithoutServiceInput
  >;
  upsert?: Maybe<
    | AppointmentUpsertWithWhereUniqueWithoutServiceInput[]
    | AppointmentUpsertWithWhereUniqueWithoutServiceInput
  >;
  deleteMany?: Maybe<
    AppointmentScalarWhereInput[] | AppointmentScalarWhereInput
  >;
  updateMany?: Maybe<
    | AppointmentUpdateManyWithWhereNestedInput[]
    | AppointmentUpdateManyWithWhereNestedInput
  >;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface AppointmentUpdateWithWhereUniqueWithoutServiceInput {
  where: AppointmentWhereUniqueInput;
  data: AppointmentUpdateWithoutServiceDataInput;
}

export interface ServiceMessageUpsertWithWhereUniqueWithoutSenderInput {
  where: ServiceMessageWhereUniqueInput;
  update: ServiceMessageUpdateWithoutSenderDataInput;
  create: ServiceMessageCreateWithoutSenderInput;
}

export interface AppointmentUpdateWithoutServiceDataInput {
  client?: Maybe<UserUpdateOneWithoutAppointmentsInput>;
  clientName?: Maybe<String>;
  title?: Maybe<String>;
  startTime?: Maybe<String>;
  endTime?: Maybe<String>;
  duration?: Maybe<AppointmentDuration>;
  local?: Maybe<Boolean>;
  createdTime?: Maybe<String>;
}

export interface ClientMessageUpsertWithWhereUniqueWithoutSenderInput {
  where: ClientMessageWhereUniqueInput;
  update: ClientMessageUpdateWithoutSenderDataInput;
  create: ClientMessageCreateWithoutSenderInput;
}

export interface UserUpdateOneWithoutAppointmentsInput {
  create?: Maybe<UserCreateWithoutAppointmentsInput>;
  update?: Maybe<UserUpdateWithoutAppointmentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutAppointmentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface AppointmentCreateInput {
  service: ServiceCreateOneWithoutAppointmentsInput;
  client?: Maybe<UserCreateOneWithoutAppointmentsInput>;
  clientName?: Maybe<String>;
  title?: Maybe<String>;
  startTime: String;
  endTime: String;
  duration: AppointmentDuration;
  local: Boolean;
  createdTime: String;
}

export interface ClientMessageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sender?: Maybe<UserWhereInput>;
  reciever?: Maybe<ServiceWhereInput>;
  subject?: Maybe<String>;
  subject_not?: Maybe<String>;
  subject_in?: Maybe<String[] | String>;
  subject_not_in?: Maybe<String[] | String>;
  subject_lt?: Maybe<String>;
  subject_lte?: Maybe<String>;
  subject_gt?: Maybe<String>;
  subject_gte?: Maybe<String>;
  subject_contains?: Maybe<String>;
  subject_not_contains?: Maybe<String>;
  subject_starts_with?: Maybe<String>;
  subject_not_starts_with?: Maybe<String>;
  subject_ends_with?: Maybe<String>;
  subject_not_ends_with?: Maybe<String>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  AND?: Maybe<ClientMessageWhereInput[] | ClientMessageWhereInput>;
  OR?: Maybe<ClientMessageWhereInput[] | ClientMessageWhereInput>;
  NOT?: Maybe<ClientMessageWhereInput[] | ClientMessageWhereInput>;
}

export interface ServiceCreateWithoutAppointmentsInput {
  fullName: String;
  Bio?: Maybe<String>;
  email: String;
  password: String;
  age?: Maybe<Int>;
  phone?: Maybe<Int>;
  address?: Maybe<String>;
  gender?: Maybe<Gender>;
  avatar?: Maybe<String>;
  sentMessages?: Maybe<ServiceMessageCreateManyWithoutSenderInput>;
  recievedMessages?: Maybe<ClientMessageCreateManyWithoutRecieverInput>;
  reviews?: Maybe<ReviewCreateManyWithoutServiceInput>;
  office_hours?: Maybe<String>;
  education?: Maybe<String>;
  serviceType: ServiceType;
  doctorField?: Maybe<DoctorField>;
  lawyerField?: Maybe<LawyerField>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  fullName?: Maybe<String>;
  fullName_not?: Maybe<String>;
  fullName_in?: Maybe<String[] | String>;
  fullName_not_in?: Maybe<String[] | String>;
  fullName_lt?: Maybe<String>;
  fullName_lte?: Maybe<String>;
  fullName_gt?: Maybe<String>;
  fullName_gte?: Maybe<String>;
  fullName_contains?: Maybe<String>;
  fullName_not_contains?: Maybe<String>;
  fullName_starts_with?: Maybe<String>;
  fullName_not_starts_with?: Maybe<String>;
  fullName_ends_with?: Maybe<String>;
  fullName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  age?: Maybe<Int>;
  age_not?: Maybe<Int>;
  age_in?: Maybe<Int[] | Int>;
  age_not_in?: Maybe<Int[] | Int>;
  age_lt?: Maybe<Int>;
  age_lte?: Maybe<Int>;
  age_gt?: Maybe<Int>;
  age_gte?: Maybe<Int>;
  phone?: Maybe<Int>;
  phone_not?: Maybe<Int>;
  phone_in?: Maybe<Int[] | Int>;
  phone_not_in?: Maybe<Int[] | Int>;
  phone_lt?: Maybe<Int>;
  phone_lte?: Maybe<Int>;
  phone_gt?: Maybe<Int>;
  phone_gte?: Maybe<Int>;
  gender?: Maybe<Gender>;
  gender_not?: Maybe<Gender>;
  gender_in?: Maybe<Gender[] | Gender>;
  gender_not_in?: Maybe<Gender[] | Gender>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  confirmation?: Maybe<Boolean>;
  confirmation_not?: Maybe<Boolean>;
  sentMessages_every?: Maybe<ClientMessageWhereInput>;
  sentMessages_some?: Maybe<ClientMessageWhereInput>;
  sentMessages_none?: Maybe<ClientMessageWhereInput>;
  recievedMessages_every?: Maybe<ServiceMessageWhereInput>;
  recievedMessages_some?: Maybe<ServiceMessageWhereInput>;
  recievedMessages_none?: Maybe<ServiceMessageWhereInput>;
  reviews_every?: Maybe<ReviewWhereInput>;
  reviews_some?: Maybe<ReviewWhereInput>;
  reviews_none?: Maybe<ReviewWhereInput>;
  appointments_every?: Maybe<AppointmentWhereInput>;
  appointments_some?: Maybe<AppointmentWhereInput>;
  appointments_none?: Maybe<AppointmentWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ServiceMessageCreateWithoutSenderInput {
  reciever: UserCreateOneWithoutRecievedMessagesInput;
  subject: String;
  body: String;
}

export interface ServiceMessageUpdateWithWhereUniqueWithoutRecieverInput {
  where: ServiceMessageWhereUniqueInput;
  data: ServiceMessageUpdateWithoutRecieverDataInput;
}

export interface UserCreateWithoutRecievedMessagesInput {
  fullName: String;
  email: String;
  password: String;
  age: Int;
  phone?: Maybe<Int>;
  gender?: Maybe<Gender>;
  avatar?: Maybe<String>;
  confirmation?: Maybe<Boolean>;
  sentMessages?: Maybe<ClientMessageCreateManyWithoutSenderInput>;
  reviews?: Maybe<ReviewCreateManyWithoutUserInput>;
  appointments?: Maybe<AppointmentCreateManyWithoutClientInput>;
}

export interface ServiceMessageUpdateWithoutRecieverDataInput {
  sender?: Maybe<ServiceUpdateOneRequiredWithoutSentMessagesInput>;
  subject?: Maybe<String>;
  body?: Maybe<String>;
}

export interface ClientMessageCreateWithoutSenderInput {
  reciever: ServiceCreateOneWithoutRecievedMessagesInput;
  subject: String;
  body: String;
}

export interface ServiceUpdateOneRequiredWithoutSentMessagesInput {
  create?: Maybe<ServiceCreateWithoutSentMessagesInput>;
  update?: Maybe<ServiceUpdateWithoutSentMessagesDataInput>;
  upsert?: Maybe<ServiceUpsertWithoutSentMessagesInput>;
  connect?: Maybe<ServiceWhereUniqueInput>;
}

export interface ServiceCreateWithoutRecievedMessagesInput {
  fullName: String;
  Bio?: Maybe<String>;
  email: String;
  password: String;
  age?: Maybe<Int>;
  phone?: Maybe<Int>;
  address?: Maybe<String>;
  gender?: Maybe<Gender>;
  avatar?: Maybe<String>;
  appointments?: Maybe<AppointmentCreateManyWithoutServiceInput>;
  sentMessages?: Maybe<ServiceMessageCreateManyWithoutSenderInput>;
  reviews?: Maybe<ReviewCreateManyWithoutServiceInput>;
  office_hours?: Maybe<String>;
  education?: Maybe<String>;
  serviceType: ServiceType;
  doctorField?: Maybe<DoctorField>;
  lawyerField?: Maybe<LawyerField>;
}

export interface ServiceUpdateWithoutSentMessagesDataInput {
  fullName?: Maybe<String>;
  Bio?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  age?: Maybe<Int>;
  phone?: Maybe<Int>;
  address?: Maybe<String>;
  gender?: Maybe<Gender>;
  avatar?: Maybe<String>;
  appointments?: Maybe<AppointmentUpdateManyWithoutServiceInput>;
  recievedMessages?: Maybe<ClientMessageUpdateManyWithoutRecieverInput>;
  reviews?: Maybe<ReviewUpdateManyWithoutServiceInput>;
  office_hours?: Maybe<String>;
  education?: Maybe<String>;
  serviceType?: Maybe<ServiceType>;
  doctorField?: Maybe<DoctorField>;
  lawyerField?: Maybe<LawyerField>;
}

export interface AppointmentCreateWithoutServiceInput {
  client?: Maybe<UserCreateOneWithoutAppointmentsInput>;
  clientName?: Maybe<String>;
  title?: Maybe<String>;
  startTime: String;
  endTime: String;
  duration: AppointmentDuration;
  local: Boolean;
  createdTime: String;
}

export interface ClientMessageUpdateManyWithoutRecieverInput {
  create?: Maybe<
    | ClientMessageCreateWithoutRecieverInput[]
    | ClientMessageCreateWithoutRecieverInput
  >;
  delete?: Maybe<
    ClientMessageWhereUniqueInput[] | ClientMessageWhereUniqueInput
  >;
  connect?: Maybe<
    ClientMessageWhereUniqueInput[] | ClientMessageWhereUniqueInput
  >;
  set?: Maybe<ClientMessageWhereUniqueInput[] | ClientMessageWhereUniqueInput>;
  disconnect?: Maybe<
    ClientMessageWhereUniqueInput[] | ClientMessageWhereUniqueInput
  >;
  update?: Maybe<
    | ClientMessageUpdateWithWhereUniqueWithoutRecieverInput[]
    | ClientMessageUpdateWithWhereUniqueWithoutRecieverInput
  >;
  upsert?: Maybe<
    | ClientMessageUpsertWithWhereUniqueWithoutRecieverInput[]
    | ClientMessageUpsertWithWhereUniqueWithoutRecieverInput
  >;
  deleteMany?: Maybe<
    ClientMessageScalarWhereInput[] | ClientMessageScalarWhereInput
  >;
  updateMany?: Maybe<
    | ClientMessageUpdateManyWithWhereNestedInput[]
    | ClientMessageUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateWithoutAppointmentsInput {
  fullName: String;
  email: String;
  password: String;
  age: Int;
  phone?: Maybe<Int>;
  gender?: Maybe<Gender>;
  avatar?: Maybe<String>;
  confirmation?: Maybe<Boolean>;
  sentMessages?: Maybe<ClientMessageCreateManyWithoutSenderInput>;
  recievedMessages?: Maybe<ServiceMessageCreateManyWithoutRecieverInput>;
  reviews?: Maybe<ReviewCreateManyWithoutUserInput>;
}

export interface ClientMessageUpdateWithWhereUniqueWithoutRecieverInput {
  where: ClientMessageWhereUniqueInput;
  data: ClientMessageUpdateWithoutRecieverDataInput;
}

export interface ServiceMessageCreateWithoutRecieverInput {
  sender: ServiceCreateOneWithoutSentMessagesInput;
  subject: String;
  body: String;
}

export interface ClientMessageUpdateWithoutRecieverDataInput {
  sender?: Maybe<UserUpdateOneRequiredWithoutSentMessagesInput>;
  subject?: Maybe<String>;
  body?: Maybe<String>;
}

export interface ServiceCreateWithoutSentMessagesInput {
  fullName: String;
  Bio?: Maybe<String>;
  email: String;
  password: String;
  age?: Maybe<Int>;
  phone?: Maybe<Int>;
  address?: Maybe<String>;
  gender?: Maybe<Gender>;
  avatar?: Maybe<String>;
  appointments?: Maybe<AppointmentCreateManyWithoutServiceInput>;
  recievedMessages?: Maybe<ClientMessageCreateManyWithoutRecieverInput>;
  reviews?: Maybe<ReviewCreateManyWithoutServiceInput>;
  office_hours?: Maybe<String>;
  education?: Maybe<String>;
  serviceType: ServiceType;
  doctorField?: Maybe<DoctorField>;
  lawyerField?: Maybe<LawyerField>;
}

export interface UserUpdateOneRequiredWithoutSentMessagesInput {
  create?: Maybe<UserCreateWithoutSentMessagesInput>;
  update?: Maybe<UserUpdateWithoutSentMessagesDataInput>;
  upsert?: Maybe<UserUpsertWithoutSentMessagesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ClientMessageCreateWithoutRecieverInput {
  sender: UserCreateOneWithoutSentMessagesInput;
  subject: String;
  body: String;
}

export interface UserUpdateWithoutSentMessagesDataInput {
  fullName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  age?: Maybe<Int>;
  phone?: Maybe<Int>;
  gender?: Maybe<Gender>;
  avatar?: Maybe<String>;
  confirmation?: Maybe<Boolean>;
  recievedMessages?: Maybe<ServiceMessageUpdateManyWithoutRecieverInput>;
  reviews?: Maybe<ReviewUpdateManyWithoutUserInput>;
  appointments?: Maybe<AppointmentUpdateManyWithoutClientInput>;
}

export interface UserCreateWithoutSentMessagesInput {
  fullName: String;
  email: String;
  password: String;
  age: Int;
  phone?: Maybe<Int>;
  gender?: Maybe<Gender>;
  avatar?: Maybe<String>;
  confirmation?: Maybe<Boolean>;
  recievedMessages?: Maybe<ServiceMessageCreateManyWithoutRecieverInput>;
  reviews?: Maybe<ReviewCreateManyWithoutUserInput>;
  appointments?: Maybe<AppointmentCreateManyWithoutClientInput>;
}

export interface ReviewUpdateManyWithoutUserInput {
  create?: Maybe<ReviewCreateWithoutUserInput[] | ReviewCreateWithoutUserInput>;
  delete?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  set?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  disconnect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  update?: Maybe<
    | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    | ReviewUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    | ReviewUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  updateMany?: Maybe<
    | ReviewUpdateManyWithWhereNestedInput[]
    | ReviewUpdateManyWithWhereNestedInput
  >;
}

export interface ReviewCreateWithoutUserInput {
  service: ServiceCreateOneWithoutReviewsInput;
  title: String;
  content: String;
  rating: Int;
}

export interface ReviewUpdateWithWhereUniqueWithoutUserInput {
  where: ReviewWhereUniqueInput;
  data: ReviewUpdateWithoutUserDataInput;
}

export interface ServiceCreateWithoutReviewsInput {
  fullName: String;
  Bio?: Maybe<String>;
  email: String;
  password: String;
  age?: Maybe<Int>;
  phone?: Maybe<Int>;
  address?: Maybe<String>;
  gender?: Maybe<Gender>;
  avatar?: Maybe<String>;
  appointments?: Maybe<AppointmentCreateManyWithoutServiceInput>;
  sentMessages?: Maybe<ServiceMessageCreateManyWithoutSenderInput>;
  recievedMessages?: Maybe<ClientMessageCreateManyWithoutRecieverInput>;
  office_hours?: Maybe<String>;
  education?: Maybe<String>;
  serviceType: ServiceType;
  doctorField?: Maybe<DoctorField>;
  lawyerField?: Maybe<LawyerField>;
}

export interface ReviewUpdateWithoutUserDataInput {
  service?: Maybe<ServiceUpdateOneRequiredWithoutReviewsInput>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  rating?: Maybe<Int>;
}

export interface AppointmentCreateWithoutClientInput {
  service: ServiceCreateOneWithoutAppointmentsInput;
  clientName?: Maybe<String>;
  title?: Maybe<String>;
  startTime: String;
  endTime: String;
  duration: AppointmentDuration;
  local: Boolean;
  createdTime: String;
}

export interface ServiceUpdateOneRequiredWithoutReviewsInput {
  create?: Maybe<ServiceCreateWithoutReviewsInput>;
  update?: Maybe<ServiceUpdateWithoutReviewsDataInput>;
  upsert?: Maybe<ServiceUpsertWithoutReviewsInput>;
  connect?: Maybe<ServiceWhereUniqueInput>;
}

export interface ServiceMessageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sender?: Maybe<ServiceWhereInput>;
  reciever?: Maybe<UserWhereInput>;
  subject?: Maybe<String>;
  subject_not?: Maybe<String>;
  subject_in?: Maybe<String[] | String>;
  subject_not_in?: Maybe<String[] | String>;
  subject_lt?: Maybe<String>;
  subject_lte?: Maybe<String>;
  subject_gt?: Maybe<String>;
  subject_gte?: Maybe<String>;
  subject_contains?: Maybe<String>;
  subject_not_contains?: Maybe<String>;
  subject_starts_with?: Maybe<String>;
  subject_not_starts_with?: Maybe<String>;
  subject_ends_with?: Maybe<String>;
  subject_not_ends_with?: Maybe<String>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  AND?: Maybe<ServiceMessageWhereInput[] | ServiceMessageWhereInput>;
  OR?: Maybe<ServiceMessageWhereInput[] | ServiceMessageWhereInput>;
  NOT?: Maybe<ServiceMessageWhereInput[] | ServiceMessageWhereInput>;
}

export interface ServiceUpdateWithoutReviewsDataInput {
  fullName?: Maybe<String>;
  Bio?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  age?: Maybe<Int>;
  phone?: Maybe<Int>;
  address?: Maybe<String>;
  gender?: Maybe<Gender>;
  avatar?: Maybe<String>;
  appointments?: Maybe<AppointmentUpdateManyWithoutServiceInput>;
  sentMessages?: Maybe<ServiceMessageUpdateManyWithoutSenderInput>;
  recievedMessages?: Maybe<ClientMessageUpdateManyWithoutRecieverInput>;
  office_hours?: Maybe<String>;
  education?: Maybe<String>;
  serviceType?: Maybe<ServiceType>;
  doctorField?: Maybe<DoctorField>;
  lawyerField?: Maybe<LawyerField>;
}

export interface AppointmentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  service?: Maybe<ServiceWhereInput>;
  client?: Maybe<UserWhereInput>;
  clientName?: Maybe<String>;
  clientName_not?: Maybe<String>;
  clientName_in?: Maybe<String[] | String>;
  clientName_not_in?: Maybe<String[] | String>;
  clientName_lt?: Maybe<String>;
  clientName_lte?: Maybe<String>;
  clientName_gt?: Maybe<String>;
  clientName_gte?: Maybe<String>;
  clientName_contains?: Maybe<String>;
  clientName_not_contains?: Maybe<String>;
  clientName_starts_with?: Maybe<String>;
  clientName_not_starts_with?: Maybe<String>;
  clientName_ends_with?: Maybe<String>;
  clientName_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  startTime?: Maybe<String>;
  startTime_not?: Maybe<String>;
  startTime_in?: Maybe<String[] | String>;
  startTime_not_in?: Maybe<String[] | String>;
  startTime_lt?: Maybe<String>;
  startTime_lte?: Maybe<String>;
  startTime_gt?: Maybe<String>;
  startTime_gte?: Maybe<String>;
  startTime_contains?: Maybe<String>;
  startTime_not_contains?: Maybe<String>;
  startTime_starts_with?: Maybe<String>;
  startTime_not_starts_with?: Maybe<String>;
  startTime_ends_with?: Maybe<String>;
  startTime_not_ends_with?: Maybe<String>;
  endTime?: Maybe<String>;
  endTime_not?: Maybe<String>;
  endTime_in?: Maybe<String[] | String>;
  endTime_not_in?: Maybe<String[] | String>;
  endTime_lt?: Maybe<String>;
  endTime_lte?: Maybe<String>;
  endTime_gt?: Maybe<String>;
  endTime_gte?: Maybe<String>;
  endTime_contains?: Maybe<String>;
  endTime_not_contains?: Maybe<String>;
  endTime_starts_with?: Maybe<String>;
  endTime_not_starts_with?: Maybe<String>;
  endTime_ends_with?: Maybe<String>;
  endTime_not_ends_with?: Maybe<String>;
  duration?: Maybe<AppointmentDuration>;
  duration_not?: Maybe<AppointmentDuration>;
  duration_in?: Maybe<AppointmentDuration[] | AppointmentDuration>;
  duration_not_in?: Maybe<AppointmentDuration[] | AppointmentDuration>;
  local?: Maybe<Boolean>;
  local_not?: Maybe<Boolean>;
  createdTime?: Maybe<String>;
  createdTime_not?: Maybe<String>;
  createdTime_in?: Maybe<String[] | String>;
  createdTime_not_in?: Maybe<String[] | String>;
  createdTime_lt?: Maybe<String>;
  createdTime_lte?: Maybe<String>;
  createdTime_gt?: Maybe<String>;
  createdTime_gte?: Maybe<String>;
  createdTime_contains?: Maybe<String>;
  createdTime_not_contains?: Maybe<String>;
  createdTime_starts_with?: Maybe<String>;
  createdTime_not_starts_with?: Maybe<String>;
  createdTime_ends_with?: Maybe<String>;
  createdTime_not_ends_with?: Maybe<String>;
  AND?: Maybe<AppointmentWhereInput[] | AppointmentWhereInput>;
  OR?: Maybe<AppointmentWhereInput[] | AppointmentWhereInput>;
  NOT?: Maybe<AppointmentWhereInput[] | AppointmentWhereInput>;
}

export interface ServiceUpsertWithoutReviewsInput {
  update: ServiceUpdateWithoutReviewsDataInput;
  create: ServiceCreateWithoutReviewsInput;
}

export interface AppointmentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AppointmentWhereInput>;
  AND?: Maybe<
    AppointmentSubscriptionWhereInput[] | AppointmentSubscriptionWhereInput
  >;
  OR?: Maybe<
    AppointmentSubscriptionWhereInput[] | AppointmentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    AppointmentSubscriptionWhereInput[] | AppointmentSubscriptionWhereInput
  >;
}

export interface ReviewUpsertWithWhereUniqueWithoutUserInput {
  where: ReviewWhereUniqueInput;
  update: ReviewUpdateWithoutUserDataInput;
  create: ReviewCreateWithoutUserInput;
}

export type ClientMessageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ReviewScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  AND?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  OR?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  NOT?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
}

export type ReviewWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput;
  data: ReviewUpdateManyDataInput;
}

export type ServiceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface ReviewUpdateManyDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  rating?: Maybe<Int>;
}

export interface ClientMessageUpdateManyMutationInput {
  subject?: Maybe<String>;
  body?: Maybe<String>;
}

export interface AppointmentUpdateManyWithoutClientInput {
  create?: Maybe<
    AppointmentCreateWithoutClientInput[] | AppointmentCreateWithoutClientInput
  >;
  delete?: Maybe<AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput>;
  connect?: Maybe<AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput>;
  set?: Maybe<AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput>;
  disconnect?: Maybe<
    AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput
  >;
  update?: Maybe<
    | AppointmentUpdateWithWhereUniqueWithoutClientInput[]
    | AppointmentUpdateWithWhereUniqueWithoutClientInput
  >;
  upsert?: Maybe<
    | AppointmentUpsertWithWhereUniqueWithoutClientInput[]
    | AppointmentUpsertWithWhereUniqueWithoutClientInput
  >;
  deleteMany?: Maybe<
    AppointmentScalarWhereInput[] | AppointmentScalarWhereInput
  >;
  updateMany?: Maybe<
    | AppointmentUpdateManyWithWhereNestedInput[]
    | AppointmentUpdateManyWithWhereNestedInput
  >;
}

export interface AppointmentUpdateManyMutationInput {
  clientName?: Maybe<String>;
  title?: Maybe<String>;
  startTime?: Maybe<String>;
  endTime?: Maybe<String>;
  duration?: Maybe<AppointmentDuration>;
  local?: Maybe<Boolean>;
  createdTime?: Maybe<String>;
}

export interface AppointmentUpdateWithWhereUniqueWithoutClientInput {
  where: AppointmentWhereUniqueInput;
  data: AppointmentUpdateWithoutClientDataInput;
}

export interface UserUpsertWithoutRecievedMessagesInput {
  update: UserUpdateWithoutRecievedMessagesDataInput;
  create: UserCreateWithoutRecievedMessagesInput;
}

export interface AppointmentUpdateWithoutClientDataInput {
  service?: Maybe<ServiceUpdateOneRequiredWithoutAppointmentsInput>;
  clientName?: Maybe<String>;
  title?: Maybe<String>;
  startTime?: Maybe<String>;
  endTime?: Maybe<String>;
  duration?: Maybe<AppointmentDuration>;
  local?: Maybe<Boolean>;
  createdTime?: Maybe<String>;
}

export interface ServiceCreateOneWithoutAppointmentsInput {
  create?: Maybe<ServiceCreateWithoutAppointmentsInput>;
  connect?: Maybe<ServiceWhereUniqueInput>;
}

export interface AppointmentUpsertWithWhereUniqueWithoutClientInput {
  where: AppointmentWhereUniqueInput;
  update: AppointmentUpdateWithoutClientDataInput;
  create: AppointmentCreateWithoutClientInput;
}

export interface UserCreateOneWithoutRecievedMessagesInput {
  create?: Maybe<UserCreateWithoutRecievedMessagesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface AppointmentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  clientName?: Maybe<String>;
  clientName_not?: Maybe<String>;
  clientName_in?: Maybe<String[] | String>;
  clientName_not_in?: Maybe<String[] | String>;
  clientName_lt?: Maybe<String>;
  clientName_lte?: Maybe<String>;
  clientName_gt?: Maybe<String>;
  clientName_gte?: Maybe<String>;
  clientName_contains?: Maybe<String>;
  clientName_not_contains?: Maybe<String>;
  clientName_starts_with?: Maybe<String>;
  clientName_not_starts_with?: Maybe<String>;
  clientName_ends_with?: Maybe<String>;
  clientName_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  startTime?: Maybe<String>;
  startTime_not?: Maybe<String>;
  startTime_in?: Maybe<String[] | String>;
  startTime_not_in?: Maybe<String[] | String>;
  startTime_lt?: Maybe<String>;
  startTime_lte?: Maybe<String>;
  startTime_gt?: Maybe<String>;
  startTime_gte?: Maybe<String>;
  startTime_contains?: Maybe<String>;
  startTime_not_contains?: Maybe<String>;
  startTime_starts_with?: Maybe<String>;
  startTime_not_starts_with?: Maybe<String>;
  startTime_ends_with?: Maybe<String>;
  startTime_not_ends_with?: Maybe<String>;
  endTime?: Maybe<String>;
  endTime_not?: Maybe<String>;
  endTime_in?: Maybe<String[] | String>;
  endTime_not_in?: Maybe<String[] | String>;
  endTime_lt?: Maybe<String>;
  endTime_lte?: Maybe<String>;
  endTime_gt?: Maybe<String>;
  endTime_gte?: Maybe<String>;
  endTime_contains?: Maybe<String>;
  endTime_not_contains?: Maybe<String>;
  endTime_starts_with?: Maybe<String>;
  endTime_not_starts_with?: Maybe<String>;
  endTime_ends_with?: Maybe<String>;
  endTime_not_ends_with?: Maybe<String>;
  duration?: Maybe<AppointmentDuration>;
  duration_not?: Maybe<AppointmentDuration>;
  duration_in?: Maybe<AppointmentDuration[] | AppointmentDuration>;
  duration_not_in?: Maybe<AppointmentDuration[] | AppointmentDuration>;
  local?: Maybe<Boolean>;
  local_not?: Maybe<Boolean>;
  createdTime?: Maybe<String>;
  createdTime_not?: Maybe<String>;
  createdTime_in?: Maybe<String[] | String>;
  createdTime_not_in?: Maybe<String[] | String>;
  createdTime_lt?: Maybe<String>;
  createdTime_lte?: Maybe<String>;
  createdTime_gt?: Maybe<String>;
  createdTime_gte?: Maybe<String>;
  createdTime_contains?: Maybe<String>;
  createdTime_not_contains?: Maybe<String>;
  createdTime_starts_with?: Maybe<String>;
  createdTime_not_starts_with?: Maybe<String>;
  createdTime_ends_with?: Maybe<String>;
  createdTime_not_ends_with?: Maybe<String>;
  AND?: Maybe<AppointmentScalarWhereInput[] | AppointmentScalarWhereInput>;
  OR?: Maybe<AppointmentScalarWhereInput[] | AppointmentScalarWhereInput>;
  NOT?: Maybe<AppointmentScalarWhereInput[] | AppointmentScalarWhereInput>;
}

export interface ServiceCreateOneWithoutRecievedMessagesInput {
  create?: Maybe<ServiceCreateWithoutRecievedMessagesInput>;
  connect?: Maybe<ServiceWhereUniqueInput>;
}

export interface AppointmentUpdateManyWithWhereNestedInput {
  where: AppointmentScalarWhereInput;
  data: AppointmentUpdateManyDataInput;
}

export interface UserCreateOneWithoutAppointmentsInput {
  create?: Maybe<UserCreateWithoutAppointmentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface AppointmentUpdateManyDataInput {
  clientName?: Maybe<String>;
  title?: Maybe<String>;
  startTime?: Maybe<String>;
  endTime?: Maybe<String>;
  duration?: Maybe<AppointmentDuration>;
  local?: Maybe<Boolean>;
  createdTime?: Maybe<String>;
}

export interface ServiceCreateOneWithoutSentMessagesInput {
  create?: Maybe<ServiceCreateWithoutSentMessagesInput>;
  connect?: Maybe<ServiceWhereUniqueInput>;
}

export interface UserUpsertWithoutSentMessagesInput {
  update: UserUpdateWithoutSentMessagesDataInput;
  create: UserCreateWithoutSentMessagesInput;
}

export interface UserCreateOneWithoutSentMessagesInput {
  create?: Maybe<UserCreateWithoutSentMessagesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ClientMessageUpsertWithWhereUniqueWithoutRecieverInput {
  where: ClientMessageWhereUniqueInput;
  update: ClientMessageUpdateWithoutRecieverDataInput;
  create: ClientMessageCreateWithoutRecieverInput;
}

export interface ServiceCreateOneWithoutReviewsInput {
  create?: Maybe<ServiceCreateWithoutReviewsInput>;
  connect?: Maybe<ServiceWhereUniqueInput>;
}

export interface ClientMessageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  subject?: Maybe<String>;
  subject_not?: Maybe<String>;
  subject_in?: Maybe<String[] | String>;
  subject_not_in?: Maybe<String[] | String>;
  subject_lt?: Maybe<String>;
  subject_lte?: Maybe<String>;
  subject_gt?: Maybe<String>;
  subject_gte?: Maybe<String>;
  subject_contains?: Maybe<String>;
  subject_not_contains?: Maybe<String>;
  subject_starts_with?: Maybe<String>;
  subject_not_starts_with?: Maybe<String>;
  subject_ends_with?: Maybe<String>;
  subject_not_ends_with?: Maybe<String>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  AND?: Maybe<ClientMessageScalarWhereInput[] | ClientMessageScalarWhereInput>;
  OR?: Maybe<ClientMessageScalarWhereInput[] | ClientMessageScalarWhereInput>;
  NOT?: Maybe<ClientMessageScalarWhereInput[] | ClientMessageScalarWhereInput>;
}

export interface ReviewCreateManyWithoutServiceInput {
  create?: Maybe<
    ReviewCreateWithoutServiceInput[] | ReviewCreateWithoutServiceInput
  >;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
}

export interface ClientMessageUpdateManyWithWhereNestedInput {
  where: ClientMessageScalarWhereInput;
  data: ClientMessageUpdateManyDataInput;
}

export interface ReviewSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReviewWhereInput>;
  AND?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
  OR?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
  NOT?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
}

export interface ClientMessageUpdateManyDataInput {
  subject?: Maybe<String>;
  body?: Maybe<String>;
}

export interface ServiceMessageUpdateInput {
  sender?: Maybe<ServiceUpdateOneRequiredWithoutSentMessagesInput>;
  reciever?: Maybe<UserUpdateOneRequiredWithoutRecievedMessagesInput>;
  subject?: Maybe<String>;
  body?: Maybe<String>;
}

export interface ReviewUpdateManyWithoutServiceInput {
  create?: Maybe<
    ReviewCreateWithoutServiceInput[] | ReviewCreateWithoutServiceInput
  >;
  delete?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  set?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  disconnect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  update?: Maybe<
    | ReviewUpdateWithWhereUniqueWithoutServiceInput[]
    | ReviewUpdateWithWhereUniqueWithoutServiceInput
  >;
  upsert?: Maybe<
    | ReviewUpsertWithWhereUniqueWithoutServiceInput[]
    | ReviewUpsertWithWhereUniqueWithoutServiceInput
  >;
  deleteMany?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  updateMany?: Maybe<
    | ReviewUpdateManyWithWhereNestedInput[]
    | ReviewUpdateManyWithWhereNestedInput
  >;
}

export interface ReviewUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutReviewsInput>;
  service?: Maybe<ServiceUpdateOneRequiredWithoutReviewsInput>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  rating?: Maybe<Int>;
}

export interface ReviewUpdateWithWhereUniqueWithoutServiceInput {
  where: ReviewWhereUniqueInput;
  data: ReviewUpdateWithoutServiceDataInput;
}

export interface ServiceUpsertWithoutAppointmentsInput {
  update: ServiceUpdateWithoutAppointmentsDataInput;
  create: ServiceCreateWithoutAppointmentsInput;
}

export interface ReviewUpdateWithoutServiceDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutReviewsInput>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  rating?: Maybe<Int>;
}

export interface ServiceMessageCreateManyWithoutSenderInput {
  create?: Maybe<
    | ServiceMessageCreateWithoutSenderInput[]
    | ServiceMessageCreateWithoutSenderInput
  >;
  connect?: Maybe<
    ServiceMessageWhereUniqueInput[] | ServiceMessageWhereUniqueInput
  >;
}

export interface UserUpdateOneRequiredWithoutReviewsInput {
  create?: Maybe<UserCreateWithoutReviewsInput>;
  update?: Maybe<UserUpdateWithoutReviewsDataInput>;
  upsert?: Maybe<UserUpsertWithoutReviewsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface AppointmentCreateManyWithoutServiceInput {
  create?: Maybe<
    | AppointmentCreateWithoutServiceInput[]
    | AppointmentCreateWithoutServiceInput
  >;
  connect?: Maybe<AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput>;
}

export interface UserUpdateWithoutReviewsDataInput {
  fullName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  age?: Maybe<Int>;
  phone?: Maybe<Int>;
  gender?: Maybe<Gender>;
  avatar?: Maybe<String>;
  confirmation?: Maybe<Boolean>;
  sentMessages?: Maybe<ClientMessageUpdateManyWithoutSenderInput>;
  recievedMessages?: Maybe<ServiceMessageUpdateManyWithoutRecieverInput>;
  appointments?: Maybe<AppointmentUpdateManyWithoutClientInput>;
}

export interface ClientMessageCreateManyWithoutRecieverInput {
  create?: Maybe<
    | ClientMessageCreateWithoutRecieverInput[]
    | ClientMessageCreateWithoutRecieverInput
  >;
  connect?: Maybe<
    ClientMessageWhereUniqueInput[] | ClientMessageWhereUniqueInput
  >;
}

export interface UserUpsertWithoutReviewsInput {
  update: UserUpdateWithoutReviewsDataInput;
  create: UserCreateWithoutReviewsInput;
}

export interface AppointmentCreateManyWithoutClientInput {
  create?: Maybe<
    AppointmentCreateWithoutClientInput[] | AppointmentCreateWithoutClientInput
  >;
  connect?: Maybe<AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput>;
}

export interface ReviewUpsertWithWhereUniqueWithoutServiceInput {
  where: ReviewWhereUniqueInput;
  update: ReviewUpdateWithoutServiceDataInput;
  create: ReviewCreateWithoutServiceInput;
}

export interface UserUpdateInput {
  fullName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  age?: Maybe<Int>;
  phone?: Maybe<Int>;
  gender?: Maybe<Gender>;
  avatar?: Maybe<String>;
  confirmation?: Maybe<Boolean>;
  sentMessages?: Maybe<ClientMessageUpdateManyWithoutSenderInput>;
  recievedMessages?: Maybe<ServiceMessageUpdateManyWithoutRecieverInput>;
  reviews?: Maybe<ReviewUpdateManyWithoutUserInput>;
  appointments?: Maybe<AppointmentUpdateManyWithoutClientInput>;
}

export interface ServiceUpsertWithoutSentMessagesInput {
  update: ServiceUpdateWithoutSentMessagesDataInput;
  create: ServiceCreateWithoutSentMessagesInput;
}

export interface ClientMessageUpdateInput {
  sender?: Maybe<UserUpdateOneRequiredWithoutSentMessagesInput>;
  reciever?: Maybe<ServiceUpdateOneRequiredWithoutRecievedMessagesInput>;
  subject?: Maybe<String>;
  body?: Maybe<String>;
}

export interface ServiceMessageUpsertWithWhereUniqueWithoutRecieverInput {
  where: ServiceMessageWhereUniqueInput;
  update: ServiceMessageUpdateWithoutRecieverDataInput;
  create: ServiceMessageCreateWithoutRecieverInput;
}

export interface ClientMessageCreateManyWithoutSenderInput {
  create?: Maybe<
    | ClientMessageCreateWithoutSenderInput[]
    | ClientMessageCreateWithoutSenderInput
  >;
  connect?: Maybe<
    ClientMessageWhereUniqueInput[] | ClientMessageWhereUniqueInput
  >;
}

export interface ReviewCreateManyWithoutUserInput {
  create?: Maybe<ReviewCreateWithoutUserInput[] | ReviewCreateWithoutUserInput>;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
}

export interface UserUpsertWithoutAppointmentsInput {
  update: UserUpdateWithoutAppointmentsDataInput;
  create: UserCreateWithoutAppointmentsInput;
}

export interface ServiceMessageUpdateManyDataInput {
  subject?: Maybe<String>;
  body?: Maybe<String>;
}

export interface ServiceMessageUpdateManyWithWhereNestedInput {
  where: ServiceMessageScalarWhereInput;
  data: ServiceMessageUpdateManyDataInput;
}

export interface ServiceMessageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  subject?: Maybe<String>;
  subject_not?: Maybe<String>;
  subject_in?: Maybe<String[] | String>;
  subject_not_in?: Maybe<String[] | String>;
  subject_lt?: Maybe<String>;
  subject_lte?: Maybe<String>;
  subject_gt?: Maybe<String>;
  subject_gte?: Maybe<String>;
  subject_contains?: Maybe<String>;
  subject_not_contains?: Maybe<String>;
  subject_starts_with?: Maybe<String>;
  subject_not_starts_with?: Maybe<String>;
  subject_ends_with?: Maybe<String>;
  subject_not_ends_with?: Maybe<String>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    ServiceMessageScalarWhereInput[] | ServiceMessageScalarWhereInput
  >;
  OR?: Maybe<ServiceMessageScalarWhereInput[] | ServiceMessageScalarWhereInput>;
  NOT?: Maybe<
    ServiceMessageScalarWhereInput[] | ServiceMessageScalarWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface ServiceMessageCreateManyWithoutRecieverInput {
  create?: Maybe<
    | ServiceMessageCreateWithoutRecieverInput[]
    | ServiceMessageCreateWithoutRecieverInput
  >;
  connect?: Maybe<
    ServiceMessageWhereUniqueInput[] | ServiceMessageWhereUniqueInput
  >;
}

export interface ServiceUpdateInput {
  fullName?: Maybe<String>;
  Bio?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  age?: Maybe<Int>;
  phone?: Maybe<Int>;
  address?: Maybe<String>;
  gender?: Maybe<Gender>;
  avatar?: Maybe<String>;
  appointments?: Maybe<AppointmentUpdateManyWithoutServiceInput>;
  sentMessages?: Maybe<ServiceMessageUpdateManyWithoutSenderInput>;
  recievedMessages?: Maybe<ClientMessageUpdateManyWithoutRecieverInput>;
  reviews?: Maybe<ReviewUpdateManyWithoutServiceInput>;
  office_hours?: Maybe<String>;
  education?: Maybe<String>;
  serviceType?: Maybe<ServiceType>;
  doctorField?: Maybe<DoctorField>;
  lawyerField?: Maybe<LawyerField>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  fullName: String;
  email: String;
  password: String;
  age: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  confirmation: Boolean;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  age: () => Promise<Int>;
  phone: () => Promise<Int>;
  gender: () => Promise<Gender>;
  avatar: () => Promise<String>;
  confirmation: () => Promise<Boolean>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  phone: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  avatar: () => Promise<AsyncIterator<String>>;
  confirmation: () => Promise<AsyncIterator<Boolean>>;
}

export interface ClientMessageConnection {
  pageInfo: PageInfo;
  edges: ClientMessageEdge[];
}

export interface ClientMessageConnectionPromise
  extends Promise<ClientMessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClientMessageEdge>>() => T;
  aggregate: <T = AggregateClientMessagePromise>() => T;
}

export interface ClientMessageConnectionSubscription
  extends Promise<AsyncIterator<ClientMessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClientMessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClientMessageSubscription>() => T;
}

export interface ServiceMessageSubscriptionPayload {
  mutation: MutationType;
  node: ServiceMessage;
  updatedFields: String[];
  previousValues: ServiceMessagePreviousValues;
}

export interface ServiceMessageSubscriptionPayloadPromise
  extends Promise<ServiceMessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServiceMessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServiceMessagePreviousValuesPromise>() => T;
}

export interface ServiceMessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceMessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceMessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServiceMessagePreviousValuesSubscription>() => T;
}

export interface AggregateAppointment {
  count: Int;
}

export interface AggregateAppointmentPromise
  extends Promise<AggregateAppointment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAppointmentSubscription
  extends Promise<AsyncIterator<AggregateAppointment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AppointmentEdge {
  node: Appointment;
  cursor: String;
}

export interface AppointmentEdgePromise
  extends Promise<AppointmentEdge>,
    Fragmentable {
  node: <T = AppointmentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AppointmentEdgeSubscription
  extends Promise<AsyncIterator<AppointmentEdge>>,
    Fragmentable {
  node: <T = AppointmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateServiceMessage {
  count: Int;
}

export interface AggregateServiceMessagePromise
  extends Promise<AggregateServiceMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceMessageSubscription
  extends Promise<AsyncIterator<AggregateServiceMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AppointmentConnection {
  pageInfo: PageInfo;
  edges: AppointmentEdge[];
}

export interface AppointmentConnectionPromise
  extends Promise<AppointmentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AppointmentEdge>>() => T;
  aggregate: <T = AggregateAppointmentPromise>() => T;
}

export interface AppointmentConnectionSubscription
  extends Promise<AsyncIterator<AppointmentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AppointmentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAppointmentSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface ServiceMessage {
  id: ID_Output;
  subject: String;
  body: String;
}

export interface ServiceMessagePromise
  extends Promise<ServiceMessage>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sender: <T = ServicePromise>() => T;
  reciever: <T = UserPromise>() => T;
  subject: () => Promise<String>;
  body: () => Promise<String>;
}

export interface ServiceMessageSubscription
  extends Promise<AsyncIterator<ServiceMessage>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sender: <T = ServiceSubscription>() => T;
  reciever: <T = UserSubscription>() => T;
  subject: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
}

export interface ServiceMessageNullablePromise
  extends Promise<ServiceMessage | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sender: <T = ServicePromise>() => T;
  reciever: <T = UserPromise>() => T;
  subject: () => Promise<String>;
  body: () => Promise<String>;
}

export interface ServiceMessageConnection {
  pageInfo: PageInfo;
  edges: ServiceMessageEdge[];
}

export interface ServiceMessageConnectionPromise
  extends Promise<ServiceMessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceMessageEdge>>() => T;
  aggregate: <T = AggregateServiceMessagePromise>() => T;
}

export interface ServiceMessageConnectionSubscription
  extends Promise<AsyncIterator<ServiceMessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ServiceMessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateServiceMessageSubscription>() => T;
}

export interface AppointmentSubscriptionPayload {
  mutation: MutationType;
  node: Appointment;
  updatedFields: String[];
  previousValues: AppointmentPreviousValues;
}

export interface AppointmentSubscriptionPayloadPromise
  extends Promise<AppointmentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AppointmentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AppointmentPreviousValuesPromise>() => T;
}

export interface AppointmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AppointmentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AppointmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AppointmentPreviousValuesSubscription>() => T;
}

export interface ServiceEdge {
  node: Service;
  cursor: String;
}

export interface ServiceEdgePromise extends Promise<ServiceEdge>, Fragmentable {
  node: <T = ServicePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceEdgeSubscription
  extends Promise<AsyncIterator<ServiceEdge>>,
    Fragmentable {
  node: <T = ServiceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AppointmentPreviousValues {
  id: ID_Output;
  clientName?: String;
  title?: String;
  startTime: String;
  endTime: String;
  duration: AppointmentDuration;
  local: Boolean;
  createdTime: String;
}

export interface AppointmentPreviousValuesPromise
  extends Promise<AppointmentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  clientName: () => Promise<String>;
  title: () => Promise<String>;
  startTime: () => Promise<String>;
  endTime: () => Promise<String>;
  duration: () => Promise<AppointmentDuration>;
  local: () => Promise<Boolean>;
  createdTime: () => Promise<String>;
}

export interface AppointmentPreviousValuesSubscription
  extends Promise<AsyncIterator<AppointmentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  clientName: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  startTime: () => Promise<AsyncIterator<String>>;
  endTime: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<AppointmentDuration>>;
  local: () => Promise<AsyncIterator<Boolean>>;
  createdTime: () => Promise<AsyncIterator<String>>;
}

export interface Service {
  id: ID_Output;
  fullName: String;
  Bio?: String;
  email: String;
  password: String;
  age?: Int;
  phone?: Int;
  address?: String;
  gender?: Gender;
  avatar?: String;
  office_hours?: String;
  education?: String;
  serviceType: ServiceType;
  doctorField?: DoctorField;
  lawyerField?: LawyerField;
}

export interface ServicePromise extends Promise<Service>, Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  Bio: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  age: () => Promise<Int>;
  phone: () => Promise<Int>;
  address: () => Promise<String>;
  gender: () => Promise<Gender>;
  avatar: () => Promise<String>;
  appointments: <T = FragmentableArray<Appointment>>(args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sentMessages: <T = FragmentableArray<ServiceMessage>>(args?: {
    where?: ServiceMessageWhereInput;
    orderBy?: ServiceMessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recievedMessages: <T = FragmentableArray<ClientMessage>>(args?: {
    where?: ClientMessageWhereInput;
    orderBy?: ClientMessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reviews: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  office_hours: () => Promise<String>;
  education: () => Promise<String>;
  serviceType: () => Promise<ServiceType>;
  doctorField: () => Promise<DoctorField>;
  lawyerField: () => Promise<LawyerField>;
}

export interface ServiceSubscription
  extends Promise<AsyncIterator<Service>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  Bio: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  phone: () => Promise<AsyncIterator<Int>>;
  address: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  avatar: () => Promise<AsyncIterator<String>>;
  appointments: <T = Promise<AsyncIterator<AppointmentSubscription>>>(args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sentMessages: <
    T = Promise<AsyncIterator<ServiceMessageSubscription>>
  >(args?: {
    where?: ServiceMessageWhereInput;
    orderBy?: ServiceMessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recievedMessages: <
    T = Promise<AsyncIterator<ClientMessageSubscription>>
  >(args?: {
    where?: ClientMessageWhereInput;
    orderBy?: ClientMessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reviews: <T = Promise<AsyncIterator<ReviewSubscription>>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  office_hours: () => Promise<AsyncIterator<String>>;
  education: () => Promise<AsyncIterator<String>>;
  serviceType: () => Promise<AsyncIterator<ServiceType>>;
  doctorField: () => Promise<AsyncIterator<DoctorField>>;
  lawyerField: () => Promise<AsyncIterator<LawyerField>>;
}

export interface ServiceNullablePromise
  extends Promise<Service | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  Bio: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  age: () => Promise<Int>;
  phone: () => Promise<Int>;
  address: () => Promise<String>;
  gender: () => Promise<Gender>;
  avatar: () => Promise<String>;
  appointments: <T = FragmentableArray<Appointment>>(args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sentMessages: <T = FragmentableArray<ServiceMessage>>(args?: {
    where?: ServiceMessageWhereInput;
    orderBy?: ServiceMessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recievedMessages: <T = FragmentableArray<ClientMessage>>(args?: {
    where?: ClientMessageWhereInput;
    orderBy?: ClientMessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reviews: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  office_hours: () => Promise<String>;
  education: () => Promise<String>;
  serviceType: () => Promise<ServiceType>;
  doctorField: () => Promise<DoctorField>;
  lawyerField: () => Promise<LawyerField>;
}

export interface Review {
  id: ID_Output;
  title: String;
  content: String;
  rating: Int;
}

export interface ReviewPromise extends Promise<Review>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  service: <T = ServicePromise>() => T;
  title: () => Promise<String>;
  content: () => Promise<String>;
  rating: () => Promise<Int>;
}

export interface ReviewSubscription
  extends Promise<AsyncIterator<Review>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  service: <T = ServiceSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<Int>>;
}

export interface ReviewNullablePromise
  extends Promise<Review | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  service: <T = ServicePromise>() => T;
  title: () => Promise<String>;
  content: () => Promise<String>;
  rating: () => Promise<Int>;
}

export interface ReviewEdge {
  node: Review;
  cursor: String;
}

export interface ReviewEdgePromise extends Promise<ReviewEdge>, Fragmentable {
  node: <T = ReviewPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReviewEdgeSubscription
  extends Promise<AsyncIterator<ReviewEdge>>,
    Fragmentable {
  node: <T = ReviewSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ClientMessageSubscriptionPayload {
  mutation: MutationType;
  node: ClientMessage;
  updatedFields: String[];
  previousValues: ClientMessagePreviousValues;
}

export interface ClientMessageSubscriptionPayloadPromise
  extends Promise<ClientMessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClientMessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClientMessagePreviousValuesPromise>() => T;
}

export interface ClientMessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClientMessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClientMessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClientMessagePreviousValuesSubscription>() => T;
}

export interface AggregateClientMessage {
  count: Int;
}

export interface AggregateClientMessagePromise
  extends Promise<AggregateClientMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClientMessageSubscription
  extends Promise<AsyncIterator<AggregateClientMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ClientMessagePreviousValues {
  id: ID_Output;
  subject: String;
  body: String;
}

export interface ClientMessagePreviousValuesPromise
  extends Promise<ClientMessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  subject: () => Promise<String>;
  body: () => Promise<String>;
}

export interface ClientMessagePreviousValuesSubscription
  extends Promise<AsyncIterator<ClientMessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  subject: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ServiceMessagePreviousValues {
  id: ID_Output;
  subject: String;
  body: String;
}

export interface ServiceMessagePreviousValuesPromise
  extends Promise<ServiceMessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  subject: () => Promise<String>;
  body: () => Promise<String>;
}

export interface ServiceMessagePreviousValuesSubscription
  extends Promise<AsyncIterator<ServiceMessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  subject: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ReviewSubscriptionPayload {
  mutation: MutationType;
  node: Review;
  updatedFields: String[];
  previousValues: ReviewPreviousValues;
}

export interface ReviewSubscriptionPayloadPromise
  extends Promise<ReviewSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReviewPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReviewPreviousValuesPromise>() => T;
}

export interface ReviewSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReviewSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReviewSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReviewPreviousValuesSubscription>() => T;
}

export interface AggregateService {
  count: Int;
}

export interface AggregateServicePromise
  extends Promise<AggregateService>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceSubscription
  extends Promise<AsyncIterator<AggregateService>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReviewPreviousValues {
  id: ID_Output;
  title: String;
  content: String;
  rating: Int;
}

export interface ReviewPreviousValuesPromise
  extends Promise<ReviewPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  rating: () => Promise<Int>;
}

export interface ReviewPreviousValuesSubscription
  extends Promise<AsyncIterator<ReviewPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateReview {
  count: Int;
}

export interface AggregateReviewPromise
  extends Promise<AggregateReview>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReviewSubscription
  extends Promise<AsyncIterator<AggregateReview>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ClientMessageEdge {
  node: ClientMessage;
  cursor: String;
}

export interface ClientMessageEdgePromise
  extends Promise<ClientMessageEdge>,
    Fragmentable {
  node: <T = ClientMessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClientMessageEdgeSubscription
  extends Promise<AsyncIterator<ClientMessageEdge>>,
    Fragmentable {
  node: <T = ClientMessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  fullName: String;
  email: String;
  password: String;
  age: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  confirmation: Boolean;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  age: () => Promise<Int>;
  phone: () => Promise<Int>;
  gender: () => Promise<Gender>;
  avatar: () => Promise<String>;
  confirmation: () => Promise<Boolean>;
  sentMessages: <T = FragmentableArray<ClientMessage>>(args?: {
    where?: ClientMessageWhereInput;
    orderBy?: ClientMessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recievedMessages: <T = FragmentableArray<ServiceMessage>>(args?: {
    where?: ServiceMessageWhereInput;
    orderBy?: ServiceMessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reviews: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  appointments: <T = FragmentableArray<Appointment>>(args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  phone: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  avatar: () => Promise<AsyncIterator<String>>;
  confirmation: () => Promise<AsyncIterator<Boolean>>;
  sentMessages: <T = Promise<AsyncIterator<ClientMessageSubscription>>>(args?: {
    where?: ClientMessageWhereInput;
    orderBy?: ClientMessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recievedMessages: <
    T = Promise<AsyncIterator<ServiceMessageSubscription>>
  >(args?: {
    where?: ServiceMessageWhereInput;
    orderBy?: ServiceMessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reviews: <T = Promise<AsyncIterator<ReviewSubscription>>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  appointments: <T = Promise<AsyncIterator<AppointmentSubscription>>>(args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  age: () => Promise<Int>;
  phone: () => Promise<Int>;
  gender: () => Promise<Gender>;
  avatar: () => Promise<String>;
  confirmation: () => Promise<Boolean>;
  sentMessages: <T = FragmentableArray<ClientMessage>>(args?: {
    where?: ClientMessageWhereInput;
    orderBy?: ClientMessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recievedMessages: <T = FragmentableArray<ServiceMessage>>(args?: {
    where?: ServiceMessageWhereInput;
    orderBy?: ServiceMessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reviews: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  appointments: <T = FragmentableArray<Appointment>>(args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ServicePreviousValues {
  id: ID_Output;
  fullName: String;
  Bio?: String;
  email: String;
  password: String;
  age?: Int;
  phone?: Int;
  address?: String;
  gender?: Gender;
  avatar?: String;
  office_hours?: String;
  education?: String;
  serviceType: ServiceType;
  doctorField?: DoctorField;
  lawyerField?: LawyerField;
}

export interface ServicePreviousValuesPromise
  extends Promise<ServicePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  Bio: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  age: () => Promise<Int>;
  phone: () => Promise<Int>;
  address: () => Promise<String>;
  gender: () => Promise<Gender>;
  avatar: () => Promise<String>;
  office_hours: () => Promise<String>;
  education: () => Promise<String>;
  serviceType: () => Promise<ServiceType>;
  doctorField: () => Promise<DoctorField>;
  lawyerField: () => Promise<LawyerField>;
}

export interface ServicePreviousValuesSubscription
  extends Promise<AsyncIterator<ServicePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  Bio: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  phone: () => Promise<AsyncIterator<Int>>;
  address: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  avatar: () => Promise<AsyncIterator<String>>;
  office_hours: () => Promise<AsyncIterator<String>>;
  education: () => Promise<AsyncIterator<String>>;
  serviceType: () => Promise<AsyncIterator<ServiceType>>;
  doctorField: () => Promise<AsyncIterator<DoctorField>>;
  lawyerField: () => Promise<AsyncIterator<LawyerField>>;
}

export interface ServiceSubscriptionPayload {
  mutation: MutationType;
  node: Service;
  updatedFields: String[];
  previousValues: ServicePreviousValues;
}

export interface ServiceSubscriptionPayloadPromise
  extends Promise<ServiceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServicePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServicePreviousValuesPromise>() => T;
}

export interface ServiceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServicePreviousValuesSubscription>() => T;
}

export interface ClientMessage {
  id: ID_Output;
  subject: String;
  body: String;
}

export interface ClientMessagePromise
  extends Promise<ClientMessage>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sender: <T = UserPromise>() => T;
  reciever: <T = ServicePromise>() => T;
  subject: () => Promise<String>;
  body: () => Promise<String>;
}

export interface ClientMessageSubscription
  extends Promise<AsyncIterator<ClientMessage>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sender: <T = UserSubscription>() => T;
  reciever: <T = ServiceSubscription>() => T;
  subject: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
}

export interface ClientMessageNullablePromise
  extends Promise<ClientMessage | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sender: <T = UserPromise>() => T;
  reciever: <T = ServicePromise>() => T;
  subject: () => Promise<String>;
  body: () => Promise<String>;
}

export interface Appointment {
  id: ID_Output;
  clientName?: String;
  title?: String;
  startTime: String;
  endTime: String;
  duration: AppointmentDuration;
  local: Boolean;
  createdTime: String;
}

export interface AppointmentPromise extends Promise<Appointment>, Fragmentable {
  id: () => Promise<ID_Output>;
  service: <T = ServicePromise>() => T;
  client: <T = UserPromise>() => T;
  clientName: () => Promise<String>;
  title: () => Promise<String>;
  startTime: () => Promise<String>;
  endTime: () => Promise<String>;
  duration: () => Promise<AppointmentDuration>;
  local: () => Promise<Boolean>;
  createdTime: () => Promise<String>;
}

export interface AppointmentSubscription
  extends Promise<AsyncIterator<Appointment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  service: <T = ServiceSubscription>() => T;
  client: <T = UserSubscription>() => T;
  clientName: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  startTime: () => Promise<AsyncIterator<String>>;
  endTime: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<AppointmentDuration>>;
  local: () => Promise<AsyncIterator<Boolean>>;
  createdTime: () => Promise<AsyncIterator<String>>;
}

export interface AppointmentNullablePromise
  extends Promise<Appointment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  service: <T = ServicePromise>() => T;
  client: <T = UserPromise>() => T;
  clientName: () => Promise<String>;
  title: () => Promise<String>;
  startTime: () => Promise<String>;
  endTime: () => Promise<String>;
  duration: () => Promise<AppointmentDuration>;
  local: () => Promise<Boolean>;
  createdTime: () => Promise<String>;
}

export interface ReviewConnection {
  pageInfo: PageInfo;
  edges: ReviewEdge[];
}

export interface ReviewConnectionPromise
  extends Promise<ReviewConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReviewEdge>>() => T;
  aggregate: <T = AggregateReviewPromise>() => T;
}

export interface ReviewConnectionSubscription
  extends Promise<AsyncIterator<ReviewConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReviewEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReviewSubscription>() => T;
}

export interface ServiceConnection {
  pageInfo: PageInfo;
  edges: ServiceEdge[];
}

export interface ServiceConnectionPromise
  extends Promise<ServiceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceEdge>>() => T;
  aggregate: <T = AggregateServicePromise>() => T;
}

export interface ServiceConnectionSubscription
  extends Promise<AsyncIterator<ServiceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ServiceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateServiceSubscription>() => T;
}

export interface ServiceMessageEdge {
  node: ServiceMessage;
  cursor: String;
}

export interface ServiceMessageEdgePromise
  extends Promise<ServiceMessageEdge>,
    Fragmentable {
  node: <T = ServiceMessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceMessageEdgeSubscription
  extends Promise<AsyncIterator<ServiceMessageEdge>>,
    Fragmentable {
  node: <T = ServiceMessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Service",
    embedded: false
  },
  {
    name: "Appointment",
    embedded: false
  },
  {
    name: "Review",
    embedded: false
  },
  {
    name: "AppointmentDuration",
    embedded: false
  },
  {
    name: "Gender",
    embedded: false
  },
  {
    name: "DoctorField",
    embedded: false
  },
  {
    name: "LawyerField",
    embedded: false
  },
  {
    name: "ClientMessage",
    embedded: false
  },
  {
    name: "ServiceMessage",
    embedded: false
  },
  {
    name: "ServiceType",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
