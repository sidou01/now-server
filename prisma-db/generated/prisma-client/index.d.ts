// Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  appointment: (where?: AppointmentWhereInput) => Promise<boolean>;
  clientMessage: (where?: ClientMessageWhereInput) => Promise<boolean>;
  doctor: (where?: DoctorWhereInput) => Promise<boolean>;
  serviceMessage: (where?: ServiceMessageWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  appointment: (where: AppointmentWhereUniqueInput) => AppointmentPromise;
  appointments: (
    args?: {
      where?: AppointmentWhereInput;
      orderBy?: AppointmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Appointment>;
  appointmentsConnection: (
    args?: {
      where?: AppointmentWhereInput;
      orderBy?: AppointmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AppointmentConnectionPromise;
  clientMessage: (where: ClientMessageWhereUniqueInput) => ClientMessagePromise;
  clientMessages: (
    args?: {
      where?: ClientMessageWhereInput;
      orderBy?: ClientMessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ClientMessage>;
  clientMessagesConnection: (
    args?: {
      where?: ClientMessageWhereInput;
      orderBy?: ClientMessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ClientMessageConnectionPromise;
  doctor: (where: DoctorWhereUniqueInput) => DoctorPromise;
  doctors: (
    args?: {
      where?: DoctorWhereInput;
      orderBy?: DoctorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Doctor>;
  doctorsConnection: (
    args?: {
      where?: DoctorWhereInput;
      orderBy?: DoctorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DoctorConnectionPromise;
  serviceMessage: (
    where: ServiceMessageWhereUniqueInput
  ) => ServiceMessagePromise;
  serviceMessages: (
    args?: {
      where?: ServiceMessageWhereInput;
      orderBy?: ServiceMessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ServiceMessage>;
  serviceMessagesConnection: (
    args?: {
      where?: ServiceMessageWhereInput;
      orderBy?: ServiceMessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ServiceMessageConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAppointment: (data: AppointmentCreateInput) => AppointmentPromise;
  updateAppointment: (
    args: { data: AppointmentUpdateInput; where: AppointmentWhereUniqueInput }
  ) => AppointmentPromise;
  updateManyAppointments: (
    args: {
      data: AppointmentUpdateManyMutationInput;
      where?: AppointmentWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertAppointment: (
    args: {
      where: AppointmentWhereUniqueInput;
      create: AppointmentCreateInput;
      update: AppointmentUpdateInput;
    }
  ) => AppointmentPromise;
  deleteAppointment: (where: AppointmentWhereUniqueInput) => AppointmentPromise;
  deleteManyAppointments: (
    where?: AppointmentWhereInput
  ) => BatchPayloadPromise;
  createClientMessage: (data: ClientMessageCreateInput) => ClientMessagePromise;
  updateClientMessage: (
    args: {
      data: ClientMessageUpdateInput;
      where: ClientMessageWhereUniqueInput;
    }
  ) => ClientMessagePromise;
  updateManyClientMessages: (
    args: {
      data: ClientMessageUpdateManyMutationInput;
      where?: ClientMessageWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertClientMessage: (
    args: {
      where: ClientMessageWhereUniqueInput;
      create: ClientMessageCreateInput;
      update: ClientMessageUpdateInput;
    }
  ) => ClientMessagePromise;
  deleteClientMessage: (
    where: ClientMessageWhereUniqueInput
  ) => ClientMessagePromise;
  deleteManyClientMessages: (
    where?: ClientMessageWhereInput
  ) => BatchPayloadPromise;
  createDoctor: (data: DoctorCreateInput) => DoctorPromise;
  updateDoctor: (
    args: { data: DoctorUpdateInput; where: DoctorWhereUniqueInput }
  ) => DoctorPromise;
  updateManyDoctors: (
    args: { data: DoctorUpdateManyMutationInput; where?: DoctorWhereInput }
  ) => BatchPayloadPromise;
  upsertDoctor: (
    args: {
      where: DoctorWhereUniqueInput;
      create: DoctorCreateInput;
      update: DoctorUpdateInput;
    }
  ) => DoctorPromise;
  deleteDoctor: (where: DoctorWhereUniqueInput) => DoctorPromise;
  deleteManyDoctors: (where?: DoctorWhereInput) => BatchPayloadPromise;
  createServiceMessage: (
    data: ServiceMessageCreateInput
  ) => ServiceMessagePromise;
  updateServiceMessage: (
    args: {
      data: ServiceMessageUpdateInput;
      where: ServiceMessageWhereUniqueInput;
    }
  ) => ServiceMessagePromise;
  updateManyServiceMessages: (
    args: {
      data: ServiceMessageUpdateManyMutationInput;
      where?: ServiceMessageWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertServiceMessage: (
    args: {
      where: ServiceMessageWhereUniqueInput;
      create: ServiceMessageCreateInput;
      update: ServiceMessageUpdateInput;
    }
  ) => ServiceMessagePromise;
  deleteServiceMessage: (
    where: ServiceMessageWhereUniqueInput
  ) => ServiceMessagePromise;
  deleteManyServiceMessages: (
    where?: ServiceMessageWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  appointment: (
    where?: AppointmentSubscriptionWhereInput
  ) => AppointmentSubscriptionPayloadSubscription;
  clientMessage: (
    where?: ClientMessageSubscriptionWhereInput
  ) => ClientMessageSubscriptionPayloadSubscription;
  doctor: (
    where?: DoctorSubscriptionWhereInput
  ) => DoctorSubscriptionPayloadSubscription;
  serviceMessage: (
    where?: ServiceMessageSubscriptionWhereInput
  ) => ServiceMessageSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Gender = "MALE" | "FEMALE";

export type DoctorSpecialty =
  | "Generaliste"
  | "Psychiatre"
  | "Psychologue"
  | "Dermatologue"
  | "Dentiste"
  | "Gynecologue";

export type AppointmentDuration = "VERY_SHORT" | "SHORT" | "LONG" | "VERY_LONG";

export type AppointmentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "clientName_ASC"
  | "clientName_DESC"
  | "title_ASC"
  | "title_DESC"
  | "startTime_ASC"
  | "startTime_DESC"
  | "endTime_ASC"
  | "endTime_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "local_ASC"
  | "local_DESC"
  | "createdTime_ASC"
  | "createdTime_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ServiceMessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "subject_ASC"
  | "subject_DESC"
  | "body_ASC"
  | "body_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ClientMessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "subject_ASC"
  | "subject_DESC"
  | "body_ASC"
  | "body_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DoctorOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fullName_ASC"
  | "fullName_DESC"
  | "Bio_ASC"
  | "Bio_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "age_ASC"
  | "age_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "specialty_ASC"
  | "specialty_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fullName_ASC"
  | "fullName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "age_ASC"
  | "age_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "confirmation_ASC"
  | "confirmation_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AppointmentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  startTime?: String;
  endTime?: String;
}>;

export interface AppointmentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  service?: DoctorWhereInput;
  client?: UserWhereInput;
  clientName?: String;
  clientName_not?: String;
  clientName_in?: String[] | String;
  clientName_not_in?: String[] | String;
  clientName_lt?: String;
  clientName_lte?: String;
  clientName_gt?: String;
  clientName_gte?: String;
  clientName_contains?: String;
  clientName_not_contains?: String;
  clientName_starts_with?: String;
  clientName_not_starts_with?: String;
  clientName_ends_with?: String;
  clientName_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  startTime?: String;
  startTime_not?: String;
  startTime_in?: String[] | String;
  startTime_not_in?: String[] | String;
  startTime_lt?: String;
  startTime_lte?: String;
  startTime_gt?: String;
  startTime_gte?: String;
  startTime_contains?: String;
  startTime_not_contains?: String;
  startTime_starts_with?: String;
  startTime_not_starts_with?: String;
  startTime_ends_with?: String;
  startTime_not_ends_with?: String;
  endTime?: String;
  endTime_not?: String;
  endTime_in?: String[] | String;
  endTime_not_in?: String[] | String;
  endTime_lt?: String;
  endTime_lte?: String;
  endTime_gt?: String;
  endTime_gte?: String;
  endTime_contains?: String;
  endTime_not_contains?: String;
  endTime_starts_with?: String;
  endTime_not_starts_with?: String;
  endTime_ends_with?: String;
  endTime_not_ends_with?: String;
  duration?: AppointmentDuration;
  duration_not?: AppointmentDuration;
  duration_in?: AppointmentDuration[] | AppointmentDuration;
  duration_not_in?: AppointmentDuration[] | AppointmentDuration;
  local?: Boolean;
  local_not?: Boolean;
  createdTime?: String;
  createdTime_not?: String;
  createdTime_in?: String[] | String;
  createdTime_not_in?: String[] | String;
  createdTime_lt?: String;
  createdTime_lte?: String;
  createdTime_gt?: String;
  createdTime_gte?: String;
  createdTime_contains?: String;
  createdTime_not_contains?: String;
  createdTime_starts_with?: String;
  createdTime_not_starts_with?: String;
  createdTime_ends_with?: String;
  createdTime_not_ends_with?: String;
  AND?: AppointmentWhereInput[] | AppointmentWhereInput;
  OR?: AppointmentWhereInput[] | AppointmentWhereInput;
  NOT?: AppointmentWhereInput[] | AppointmentWhereInput;
}

export interface DoctorWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  fullName?: String;
  fullName_not?: String;
  fullName_in?: String[] | String;
  fullName_not_in?: String[] | String;
  fullName_lt?: String;
  fullName_lte?: String;
  fullName_gt?: String;
  fullName_gte?: String;
  fullName_contains?: String;
  fullName_not_contains?: String;
  fullName_starts_with?: String;
  fullName_not_starts_with?: String;
  fullName_ends_with?: String;
  fullName_not_ends_with?: String;
  Bio?: String;
  Bio_not?: String;
  Bio_in?: String[] | String;
  Bio_not_in?: String[] | String;
  Bio_lt?: String;
  Bio_lte?: String;
  Bio_gt?: String;
  Bio_gte?: String;
  Bio_contains?: String;
  Bio_not_contains?: String;
  Bio_starts_with?: String;
  Bio_not_starts_with?: String;
  Bio_ends_with?: String;
  Bio_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  age?: Int;
  age_not?: Int;
  age_in?: Int[] | Int;
  age_not_in?: Int[] | Int;
  age_lt?: Int;
  age_lte?: Int;
  age_gt?: Int;
  age_gte?: Int;
  phone?: Int;
  phone_not?: Int;
  phone_in?: Int[] | Int;
  phone_not_in?: Int[] | Int;
  phone_lt?: Int;
  phone_lte?: Int;
  phone_gt?: Int;
  phone_gte?: Int;
  gender?: Gender;
  gender_not?: Gender;
  gender_in?: Gender[] | Gender;
  gender_not_in?: Gender[] | Gender;
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  appointments_every?: AppointmentWhereInput;
  appointments_some?: AppointmentWhereInput;
  appointments_none?: AppointmentWhereInput;
  specialty?: DoctorSpecialty;
  specialty_not?: DoctorSpecialty;
  specialty_in?: DoctorSpecialty[] | DoctorSpecialty;
  specialty_not_in?: DoctorSpecialty[] | DoctorSpecialty;
  sentMessages_every?: ServiceMessageWhereInput;
  sentMessages_some?: ServiceMessageWhereInput;
  sentMessages_none?: ServiceMessageWhereInput;
  recievedMessages_every?: ClientMessageWhereInput;
  recievedMessages_some?: ClientMessageWhereInput;
  recievedMessages_none?: ClientMessageWhereInput;
  AND?: DoctorWhereInput[] | DoctorWhereInput;
  OR?: DoctorWhereInput[] | DoctorWhereInput;
  NOT?: DoctorWhereInput[] | DoctorWhereInput;
}

export interface ServiceMessageWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  sender?: DoctorWhereInput;
  reciever?: UserWhereInput;
  subject?: String;
  subject_not?: String;
  subject_in?: String[] | String;
  subject_not_in?: String[] | String;
  subject_lt?: String;
  subject_lte?: String;
  subject_gt?: String;
  subject_gte?: String;
  subject_contains?: String;
  subject_not_contains?: String;
  subject_starts_with?: String;
  subject_not_starts_with?: String;
  subject_ends_with?: String;
  subject_not_ends_with?: String;
  body?: String;
  body_not?: String;
  body_in?: String[] | String;
  body_not_in?: String[] | String;
  body_lt?: String;
  body_lte?: String;
  body_gt?: String;
  body_gte?: String;
  body_contains?: String;
  body_not_contains?: String;
  body_starts_with?: String;
  body_not_starts_with?: String;
  body_ends_with?: String;
  body_not_ends_with?: String;
  AND?: ServiceMessageWhereInput[] | ServiceMessageWhereInput;
  OR?: ServiceMessageWhereInput[] | ServiceMessageWhereInput;
  NOT?: ServiceMessageWhereInput[] | ServiceMessageWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  fullName?: String;
  fullName_not?: String;
  fullName_in?: String[] | String;
  fullName_not_in?: String[] | String;
  fullName_lt?: String;
  fullName_lte?: String;
  fullName_gt?: String;
  fullName_gte?: String;
  fullName_contains?: String;
  fullName_not_contains?: String;
  fullName_starts_with?: String;
  fullName_not_starts_with?: String;
  fullName_ends_with?: String;
  fullName_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  age?: Int;
  age_not?: Int;
  age_in?: Int[] | Int;
  age_not_in?: Int[] | Int;
  age_lt?: Int;
  age_lte?: Int;
  age_gt?: Int;
  age_gte?: Int;
  phone?: Int;
  phone_not?: Int;
  phone_in?: Int[] | Int;
  phone_not_in?: Int[] | Int;
  phone_lt?: Int;
  phone_lte?: Int;
  phone_gt?: Int;
  phone_gte?: Int;
  gender?: Gender;
  gender_not?: Gender;
  gender_in?: Gender[] | Gender;
  gender_not_in?: Gender[] | Gender;
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  confirmation?: Boolean;
  confirmation_not?: Boolean;
  Appointments_every?: AppointmentWhereInput;
  Appointments_some?: AppointmentWhereInput;
  Appointments_none?: AppointmentWhereInput;
  sentMessages_every?: ClientMessageWhereInput;
  sentMessages_some?: ClientMessageWhereInput;
  sentMessages_none?: ClientMessageWhereInput;
  recievedMessages_every?: ServiceMessageWhereInput;
  recievedMessages_some?: ServiceMessageWhereInput;
  recievedMessages_none?: ServiceMessageWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface ClientMessageWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  sender?: UserWhereInput;
  reciever?: DoctorWhereInput;
  subject?: String;
  subject_not?: String;
  subject_in?: String[] | String;
  subject_not_in?: String[] | String;
  subject_lt?: String;
  subject_lte?: String;
  subject_gt?: String;
  subject_gte?: String;
  subject_contains?: String;
  subject_not_contains?: String;
  subject_starts_with?: String;
  subject_not_starts_with?: String;
  subject_ends_with?: String;
  subject_not_ends_with?: String;
  body?: String;
  body_not?: String;
  body_in?: String[] | String;
  body_not_in?: String[] | String;
  body_lt?: String;
  body_lte?: String;
  body_gt?: String;
  body_gte?: String;
  body_contains?: String;
  body_not_contains?: String;
  body_starts_with?: String;
  body_not_starts_with?: String;
  body_ends_with?: String;
  body_not_ends_with?: String;
  AND?: ClientMessageWhereInput[] | ClientMessageWhereInput;
  OR?: ClientMessageWhereInput[] | ClientMessageWhereInput;
  NOT?: ClientMessageWhereInput[] | ClientMessageWhereInput;
}

export type ClientMessageWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type DoctorWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export type ServiceMessageWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface AppointmentCreateInput {
  service: DoctorCreateOneWithoutAppointmentsInput;
  client?: UserCreateOneWithoutAppointmentsInput;
  clientName?: String;
  title?: String;
  startTime: String;
  endTime: String;
  duration: AppointmentDuration;
  local: Boolean;
  createdTime: String;
}

export interface DoctorCreateOneWithoutAppointmentsInput {
  create?: DoctorCreateWithoutAppointmentsInput;
  connect?: DoctorWhereUniqueInput;
}

export interface DoctorCreateWithoutAppointmentsInput {
  fullName: String;
  Bio?: String;
  email: String;
  password: String;
  age?: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  specialty: DoctorSpecialty;
  sentMessages?: ServiceMessageCreateManyWithoutSenderInput;
  recievedMessages?: ClientMessageCreateManyWithoutRecieverInput;
}

export interface ServiceMessageCreateManyWithoutSenderInput {
  create?:
    | ServiceMessageCreateWithoutSenderInput[]
    | ServiceMessageCreateWithoutSenderInput;
  connect?: ServiceMessageWhereUniqueInput[] | ServiceMessageWhereUniqueInput;
}

export interface ServiceMessageCreateWithoutSenderInput {
  reciever: UserCreateOneWithoutRecievedMessagesInput;
  subject: String;
  body: String;
}

export interface UserCreateOneWithoutRecievedMessagesInput {
  create?: UserCreateWithoutRecievedMessagesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutRecievedMessagesInput {
  fullName: String;
  email: String;
  password: String;
  age: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  confirmation?: Boolean;
  Appointments?: AppointmentCreateManyWithoutClientInput;
  sentMessages?: ClientMessageCreateManyWithoutSenderInput;
}

export interface AppointmentCreateManyWithoutClientInput {
  create?:
    | AppointmentCreateWithoutClientInput[]
    | AppointmentCreateWithoutClientInput;
  connect?: AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput;
}

export interface AppointmentCreateWithoutClientInput {
  service: DoctorCreateOneWithoutAppointmentsInput;
  clientName?: String;
  title?: String;
  startTime: String;
  endTime: String;
  duration: AppointmentDuration;
  local: Boolean;
  createdTime: String;
}

export interface ClientMessageCreateManyWithoutSenderInput {
  create?:
    | ClientMessageCreateWithoutSenderInput[]
    | ClientMessageCreateWithoutSenderInput;
  connect?: ClientMessageWhereUniqueInput[] | ClientMessageWhereUniqueInput;
}

export interface ClientMessageCreateWithoutSenderInput {
  reciever: DoctorCreateOneWithoutRecievedMessagesInput;
  subject: String;
  body: String;
}

export interface DoctorCreateOneWithoutRecievedMessagesInput {
  create?: DoctorCreateWithoutRecievedMessagesInput;
  connect?: DoctorWhereUniqueInput;
}

export interface DoctorCreateWithoutRecievedMessagesInput {
  fullName: String;
  Bio?: String;
  email: String;
  password: String;
  age?: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  appointments?: AppointmentCreateManyWithoutServiceInput;
  specialty: DoctorSpecialty;
  sentMessages?: ServiceMessageCreateManyWithoutSenderInput;
}

export interface AppointmentCreateManyWithoutServiceInput {
  create?:
    | AppointmentCreateWithoutServiceInput[]
    | AppointmentCreateWithoutServiceInput;
  connect?: AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput;
}

export interface AppointmentCreateWithoutServiceInput {
  client?: UserCreateOneWithoutAppointmentsInput;
  clientName?: String;
  title?: String;
  startTime: String;
  endTime: String;
  duration: AppointmentDuration;
  local: Boolean;
  createdTime: String;
}

export interface UserCreateOneWithoutAppointmentsInput {
  create?: UserCreateWithoutAppointmentsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutAppointmentsInput {
  fullName: String;
  email: String;
  password: String;
  age: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  confirmation?: Boolean;
  sentMessages?: ClientMessageCreateManyWithoutSenderInput;
  recievedMessages?: ServiceMessageCreateManyWithoutRecieverInput;
}

export interface ServiceMessageCreateManyWithoutRecieverInput {
  create?:
    | ServiceMessageCreateWithoutRecieverInput[]
    | ServiceMessageCreateWithoutRecieverInput;
  connect?: ServiceMessageWhereUniqueInput[] | ServiceMessageWhereUniqueInput;
}

export interface ServiceMessageCreateWithoutRecieverInput {
  sender: DoctorCreateOneWithoutSentMessagesInput;
  subject: String;
  body: String;
}

export interface DoctorCreateOneWithoutSentMessagesInput {
  create?: DoctorCreateWithoutSentMessagesInput;
  connect?: DoctorWhereUniqueInput;
}

export interface DoctorCreateWithoutSentMessagesInput {
  fullName: String;
  Bio?: String;
  email: String;
  password: String;
  age?: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  appointments?: AppointmentCreateManyWithoutServiceInput;
  specialty: DoctorSpecialty;
  recievedMessages?: ClientMessageCreateManyWithoutRecieverInput;
}

export interface ClientMessageCreateManyWithoutRecieverInput {
  create?:
    | ClientMessageCreateWithoutRecieverInput[]
    | ClientMessageCreateWithoutRecieverInput;
  connect?: ClientMessageWhereUniqueInput[] | ClientMessageWhereUniqueInput;
}

export interface ClientMessageCreateWithoutRecieverInput {
  sender: UserCreateOneWithoutSentMessagesInput;
  subject: String;
  body: String;
}

export interface UserCreateOneWithoutSentMessagesInput {
  create?: UserCreateWithoutSentMessagesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutSentMessagesInput {
  fullName: String;
  email: String;
  password: String;
  age: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  confirmation?: Boolean;
  Appointments?: AppointmentCreateManyWithoutClientInput;
  recievedMessages?: ServiceMessageCreateManyWithoutRecieverInput;
}

export interface AppointmentUpdateInput {
  service?: DoctorUpdateOneRequiredWithoutAppointmentsInput;
  client?: UserUpdateOneWithoutAppointmentsInput;
  clientName?: String;
  title?: String;
  startTime?: String;
  endTime?: String;
  duration?: AppointmentDuration;
  local?: Boolean;
  createdTime?: String;
}

export interface DoctorUpdateOneRequiredWithoutAppointmentsInput {
  create?: DoctorCreateWithoutAppointmentsInput;
  update?: DoctorUpdateWithoutAppointmentsDataInput;
  upsert?: DoctorUpsertWithoutAppointmentsInput;
  connect?: DoctorWhereUniqueInput;
}

export interface DoctorUpdateWithoutAppointmentsDataInput {
  fullName?: String;
  Bio?: String;
  email?: String;
  password?: String;
  age?: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  specialty?: DoctorSpecialty;
  sentMessages?: ServiceMessageUpdateManyWithoutSenderInput;
  recievedMessages?: ClientMessageUpdateManyWithoutRecieverInput;
}

export interface ServiceMessageUpdateManyWithoutSenderInput {
  create?:
    | ServiceMessageCreateWithoutSenderInput[]
    | ServiceMessageCreateWithoutSenderInput;
  delete?: ServiceMessageWhereUniqueInput[] | ServiceMessageWhereUniqueInput;
  connect?: ServiceMessageWhereUniqueInput[] | ServiceMessageWhereUniqueInput;
  set?: ServiceMessageWhereUniqueInput[] | ServiceMessageWhereUniqueInput;
  disconnect?:
    | ServiceMessageWhereUniqueInput[]
    | ServiceMessageWhereUniqueInput;
  update?:
    | ServiceMessageUpdateWithWhereUniqueWithoutSenderInput[]
    | ServiceMessageUpdateWithWhereUniqueWithoutSenderInput;
  upsert?:
    | ServiceMessageUpsertWithWhereUniqueWithoutSenderInput[]
    | ServiceMessageUpsertWithWhereUniqueWithoutSenderInput;
  deleteMany?:
    | ServiceMessageScalarWhereInput[]
    | ServiceMessageScalarWhereInput;
  updateMany?:
    | ServiceMessageUpdateManyWithWhereNestedInput[]
    | ServiceMessageUpdateManyWithWhereNestedInput;
}

export interface ServiceMessageUpdateWithWhereUniqueWithoutSenderInput {
  where: ServiceMessageWhereUniqueInput;
  data: ServiceMessageUpdateWithoutSenderDataInput;
}

export interface ServiceMessageUpdateWithoutSenderDataInput {
  reciever?: UserUpdateOneRequiredWithoutRecievedMessagesInput;
  subject?: String;
  body?: String;
}

export interface UserUpdateOneRequiredWithoutRecievedMessagesInput {
  create?: UserCreateWithoutRecievedMessagesInput;
  update?: UserUpdateWithoutRecievedMessagesDataInput;
  upsert?: UserUpsertWithoutRecievedMessagesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutRecievedMessagesDataInput {
  fullName?: String;
  email?: String;
  password?: String;
  age?: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  confirmation?: Boolean;
  Appointments?: AppointmentUpdateManyWithoutClientInput;
  sentMessages?: ClientMessageUpdateManyWithoutSenderInput;
}

export interface AppointmentUpdateManyWithoutClientInput {
  create?:
    | AppointmentCreateWithoutClientInput[]
    | AppointmentCreateWithoutClientInput;
  delete?: AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput;
  connect?: AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput;
  set?: AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput;
  disconnect?: AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput;
  update?:
    | AppointmentUpdateWithWhereUniqueWithoutClientInput[]
    | AppointmentUpdateWithWhereUniqueWithoutClientInput;
  upsert?:
    | AppointmentUpsertWithWhereUniqueWithoutClientInput[]
    | AppointmentUpsertWithWhereUniqueWithoutClientInput;
  deleteMany?: AppointmentScalarWhereInput[] | AppointmentScalarWhereInput;
  updateMany?:
    | AppointmentUpdateManyWithWhereNestedInput[]
    | AppointmentUpdateManyWithWhereNestedInput;
}

export interface AppointmentUpdateWithWhereUniqueWithoutClientInput {
  where: AppointmentWhereUniqueInput;
  data: AppointmentUpdateWithoutClientDataInput;
}

export interface AppointmentUpdateWithoutClientDataInput {
  service?: DoctorUpdateOneRequiredWithoutAppointmentsInput;
  clientName?: String;
  title?: String;
  startTime?: String;
  endTime?: String;
  duration?: AppointmentDuration;
  local?: Boolean;
  createdTime?: String;
}

export interface AppointmentUpsertWithWhereUniqueWithoutClientInput {
  where: AppointmentWhereUniqueInput;
  update: AppointmentUpdateWithoutClientDataInput;
  create: AppointmentCreateWithoutClientInput;
}

export interface AppointmentScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  clientName?: String;
  clientName_not?: String;
  clientName_in?: String[] | String;
  clientName_not_in?: String[] | String;
  clientName_lt?: String;
  clientName_lte?: String;
  clientName_gt?: String;
  clientName_gte?: String;
  clientName_contains?: String;
  clientName_not_contains?: String;
  clientName_starts_with?: String;
  clientName_not_starts_with?: String;
  clientName_ends_with?: String;
  clientName_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  startTime?: String;
  startTime_not?: String;
  startTime_in?: String[] | String;
  startTime_not_in?: String[] | String;
  startTime_lt?: String;
  startTime_lte?: String;
  startTime_gt?: String;
  startTime_gte?: String;
  startTime_contains?: String;
  startTime_not_contains?: String;
  startTime_starts_with?: String;
  startTime_not_starts_with?: String;
  startTime_ends_with?: String;
  startTime_not_ends_with?: String;
  endTime?: String;
  endTime_not?: String;
  endTime_in?: String[] | String;
  endTime_not_in?: String[] | String;
  endTime_lt?: String;
  endTime_lte?: String;
  endTime_gt?: String;
  endTime_gte?: String;
  endTime_contains?: String;
  endTime_not_contains?: String;
  endTime_starts_with?: String;
  endTime_not_starts_with?: String;
  endTime_ends_with?: String;
  endTime_not_ends_with?: String;
  duration?: AppointmentDuration;
  duration_not?: AppointmentDuration;
  duration_in?: AppointmentDuration[] | AppointmentDuration;
  duration_not_in?: AppointmentDuration[] | AppointmentDuration;
  local?: Boolean;
  local_not?: Boolean;
  createdTime?: String;
  createdTime_not?: String;
  createdTime_in?: String[] | String;
  createdTime_not_in?: String[] | String;
  createdTime_lt?: String;
  createdTime_lte?: String;
  createdTime_gt?: String;
  createdTime_gte?: String;
  createdTime_contains?: String;
  createdTime_not_contains?: String;
  createdTime_starts_with?: String;
  createdTime_not_starts_with?: String;
  createdTime_ends_with?: String;
  createdTime_not_ends_with?: String;
  AND?: AppointmentScalarWhereInput[] | AppointmentScalarWhereInput;
  OR?: AppointmentScalarWhereInput[] | AppointmentScalarWhereInput;
  NOT?: AppointmentScalarWhereInput[] | AppointmentScalarWhereInput;
}

export interface AppointmentUpdateManyWithWhereNestedInput {
  where: AppointmentScalarWhereInput;
  data: AppointmentUpdateManyDataInput;
}

export interface AppointmentUpdateManyDataInput {
  clientName?: String;
  title?: String;
  startTime?: String;
  endTime?: String;
  duration?: AppointmentDuration;
  local?: Boolean;
  createdTime?: String;
}

export interface ClientMessageUpdateManyWithoutSenderInput {
  create?:
    | ClientMessageCreateWithoutSenderInput[]
    | ClientMessageCreateWithoutSenderInput;
  delete?: ClientMessageWhereUniqueInput[] | ClientMessageWhereUniqueInput;
  connect?: ClientMessageWhereUniqueInput[] | ClientMessageWhereUniqueInput;
  set?: ClientMessageWhereUniqueInput[] | ClientMessageWhereUniqueInput;
  disconnect?: ClientMessageWhereUniqueInput[] | ClientMessageWhereUniqueInput;
  update?:
    | ClientMessageUpdateWithWhereUniqueWithoutSenderInput[]
    | ClientMessageUpdateWithWhereUniqueWithoutSenderInput;
  upsert?:
    | ClientMessageUpsertWithWhereUniqueWithoutSenderInput[]
    | ClientMessageUpsertWithWhereUniqueWithoutSenderInput;
  deleteMany?: ClientMessageScalarWhereInput[] | ClientMessageScalarWhereInput;
  updateMany?:
    | ClientMessageUpdateManyWithWhereNestedInput[]
    | ClientMessageUpdateManyWithWhereNestedInput;
}

export interface ClientMessageUpdateWithWhereUniqueWithoutSenderInput {
  where: ClientMessageWhereUniqueInput;
  data: ClientMessageUpdateWithoutSenderDataInput;
}

export interface ClientMessageUpdateWithoutSenderDataInput {
  reciever?: DoctorUpdateOneRequiredWithoutRecievedMessagesInput;
  subject?: String;
  body?: String;
}

export interface DoctorUpdateOneRequiredWithoutRecievedMessagesInput {
  create?: DoctorCreateWithoutRecievedMessagesInput;
  update?: DoctorUpdateWithoutRecievedMessagesDataInput;
  upsert?: DoctorUpsertWithoutRecievedMessagesInput;
  connect?: DoctorWhereUniqueInput;
}

export interface DoctorUpdateWithoutRecievedMessagesDataInput {
  fullName?: String;
  Bio?: String;
  email?: String;
  password?: String;
  age?: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  appointments?: AppointmentUpdateManyWithoutServiceInput;
  specialty?: DoctorSpecialty;
  sentMessages?: ServiceMessageUpdateManyWithoutSenderInput;
}

export interface AppointmentUpdateManyWithoutServiceInput {
  create?:
    | AppointmentCreateWithoutServiceInput[]
    | AppointmentCreateWithoutServiceInput;
  delete?: AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput;
  connect?: AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput;
  set?: AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput;
  disconnect?: AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput;
  update?:
    | AppointmentUpdateWithWhereUniqueWithoutServiceInput[]
    | AppointmentUpdateWithWhereUniqueWithoutServiceInput;
  upsert?:
    | AppointmentUpsertWithWhereUniqueWithoutServiceInput[]
    | AppointmentUpsertWithWhereUniqueWithoutServiceInput;
  deleteMany?: AppointmentScalarWhereInput[] | AppointmentScalarWhereInput;
  updateMany?:
    | AppointmentUpdateManyWithWhereNestedInput[]
    | AppointmentUpdateManyWithWhereNestedInput;
}

export interface AppointmentUpdateWithWhereUniqueWithoutServiceInput {
  where: AppointmentWhereUniqueInput;
  data: AppointmentUpdateWithoutServiceDataInput;
}

export interface AppointmentUpdateWithoutServiceDataInput {
  client?: UserUpdateOneWithoutAppointmentsInput;
  clientName?: String;
  title?: String;
  startTime?: String;
  endTime?: String;
  duration?: AppointmentDuration;
  local?: Boolean;
  createdTime?: String;
}

export interface UserUpdateOneWithoutAppointmentsInput {
  create?: UserCreateWithoutAppointmentsInput;
  update?: UserUpdateWithoutAppointmentsDataInput;
  upsert?: UserUpsertWithoutAppointmentsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutAppointmentsDataInput {
  fullName?: String;
  email?: String;
  password?: String;
  age?: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  confirmation?: Boolean;
  sentMessages?: ClientMessageUpdateManyWithoutSenderInput;
  recievedMessages?: ServiceMessageUpdateManyWithoutRecieverInput;
}

export interface ServiceMessageUpdateManyWithoutRecieverInput {
  create?:
    | ServiceMessageCreateWithoutRecieverInput[]
    | ServiceMessageCreateWithoutRecieverInput;
  delete?: ServiceMessageWhereUniqueInput[] | ServiceMessageWhereUniqueInput;
  connect?: ServiceMessageWhereUniqueInput[] | ServiceMessageWhereUniqueInput;
  set?: ServiceMessageWhereUniqueInput[] | ServiceMessageWhereUniqueInput;
  disconnect?:
    | ServiceMessageWhereUniqueInput[]
    | ServiceMessageWhereUniqueInput;
  update?:
    | ServiceMessageUpdateWithWhereUniqueWithoutRecieverInput[]
    | ServiceMessageUpdateWithWhereUniqueWithoutRecieverInput;
  upsert?:
    | ServiceMessageUpsertWithWhereUniqueWithoutRecieverInput[]
    | ServiceMessageUpsertWithWhereUniqueWithoutRecieverInput;
  deleteMany?:
    | ServiceMessageScalarWhereInput[]
    | ServiceMessageScalarWhereInput;
  updateMany?:
    | ServiceMessageUpdateManyWithWhereNestedInput[]
    | ServiceMessageUpdateManyWithWhereNestedInput;
}

export interface ServiceMessageUpdateWithWhereUniqueWithoutRecieverInput {
  where: ServiceMessageWhereUniqueInput;
  data: ServiceMessageUpdateWithoutRecieverDataInput;
}

export interface ServiceMessageUpdateWithoutRecieverDataInput {
  sender?: DoctorUpdateOneRequiredWithoutSentMessagesInput;
  subject?: String;
  body?: String;
}

export interface DoctorUpdateOneRequiredWithoutSentMessagesInput {
  create?: DoctorCreateWithoutSentMessagesInput;
  update?: DoctorUpdateWithoutSentMessagesDataInput;
  upsert?: DoctorUpsertWithoutSentMessagesInput;
  connect?: DoctorWhereUniqueInput;
}

export interface DoctorUpdateWithoutSentMessagesDataInput {
  fullName?: String;
  Bio?: String;
  email?: String;
  password?: String;
  age?: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  appointments?: AppointmentUpdateManyWithoutServiceInput;
  specialty?: DoctorSpecialty;
  recievedMessages?: ClientMessageUpdateManyWithoutRecieverInput;
}

export interface ClientMessageUpdateManyWithoutRecieverInput {
  create?:
    | ClientMessageCreateWithoutRecieverInput[]
    | ClientMessageCreateWithoutRecieverInput;
  delete?: ClientMessageWhereUniqueInput[] | ClientMessageWhereUniqueInput;
  connect?: ClientMessageWhereUniqueInput[] | ClientMessageWhereUniqueInput;
  set?: ClientMessageWhereUniqueInput[] | ClientMessageWhereUniqueInput;
  disconnect?: ClientMessageWhereUniqueInput[] | ClientMessageWhereUniqueInput;
  update?:
    | ClientMessageUpdateWithWhereUniqueWithoutRecieverInput[]
    | ClientMessageUpdateWithWhereUniqueWithoutRecieverInput;
  upsert?:
    | ClientMessageUpsertWithWhereUniqueWithoutRecieverInput[]
    | ClientMessageUpsertWithWhereUniqueWithoutRecieverInput;
  deleteMany?: ClientMessageScalarWhereInput[] | ClientMessageScalarWhereInput;
  updateMany?:
    | ClientMessageUpdateManyWithWhereNestedInput[]
    | ClientMessageUpdateManyWithWhereNestedInput;
}

export interface ClientMessageUpdateWithWhereUniqueWithoutRecieverInput {
  where: ClientMessageWhereUniqueInput;
  data: ClientMessageUpdateWithoutRecieverDataInput;
}

export interface ClientMessageUpdateWithoutRecieverDataInput {
  sender?: UserUpdateOneRequiredWithoutSentMessagesInput;
  subject?: String;
  body?: String;
}

export interface UserUpdateOneRequiredWithoutSentMessagesInput {
  create?: UserCreateWithoutSentMessagesInput;
  update?: UserUpdateWithoutSentMessagesDataInput;
  upsert?: UserUpsertWithoutSentMessagesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutSentMessagesDataInput {
  fullName?: String;
  email?: String;
  password?: String;
  age?: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  confirmation?: Boolean;
  Appointments?: AppointmentUpdateManyWithoutClientInput;
  recievedMessages?: ServiceMessageUpdateManyWithoutRecieverInput;
}

export interface UserUpsertWithoutSentMessagesInput {
  update: UserUpdateWithoutSentMessagesDataInput;
  create: UserCreateWithoutSentMessagesInput;
}

export interface ClientMessageUpsertWithWhereUniqueWithoutRecieverInput {
  where: ClientMessageWhereUniqueInput;
  update: ClientMessageUpdateWithoutRecieverDataInput;
  create: ClientMessageCreateWithoutRecieverInput;
}

export interface ClientMessageScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  subject?: String;
  subject_not?: String;
  subject_in?: String[] | String;
  subject_not_in?: String[] | String;
  subject_lt?: String;
  subject_lte?: String;
  subject_gt?: String;
  subject_gte?: String;
  subject_contains?: String;
  subject_not_contains?: String;
  subject_starts_with?: String;
  subject_not_starts_with?: String;
  subject_ends_with?: String;
  subject_not_ends_with?: String;
  body?: String;
  body_not?: String;
  body_in?: String[] | String;
  body_not_in?: String[] | String;
  body_lt?: String;
  body_lte?: String;
  body_gt?: String;
  body_gte?: String;
  body_contains?: String;
  body_not_contains?: String;
  body_starts_with?: String;
  body_not_starts_with?: String;
  body_ends_with?: String;
  body_not_ends_with?: String;
  AND?: ClientMessageScalarWhereInput[] | ClientMessageScalarWhereInput;
  OR?: ClientMessageScalarWhereInput[] | ClientMessageScalarWhereInput;
  NOT?: ClientMessageScalarWhereInput[] | ClientMessageScalarWhereInput;
}

export interface ClientMessageUpdateManyWithWhereNestedInput {
  where: ClientMessageScalarWhereInput;
  data: ClientMessageUpdateManyDataInput;
}

export interface ClientMessageUpdateManyDataInput {
  subject?: String;
  body?: String;
}

export interface DoctorUpsertWithoutSentMessagesInput {
  update: DoctorUpdateWithoutSentMessagesDataInput;
  create: DoctorCreateWithoutSentMessagesInput;
}

export interface ServiceMessageUpsertWithWhereUniqueWithoutRecieverInput {
  where: ServiceMessageWhereUniqueInput;
  update: ServiceMessageUpdateWithoutRecieverDataInput;
  create: ServiceMessageCreateWithoutRecieverInput;
}

export interface ServiceMessageScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  subject?: String;
  subject_not?: String;
  subject_in?: String[] | String;
  subject_not_in?: String[] | String;
  subject_lt?: String;
  subject_lte?: String;
  subject_gt?: String;
  subject_gte?: String;
  subject_contains?: String;
  subject_not_contains?: String;
  subject_starts_with?: String;
  subject_not_starts_with?: String;
  subject_ends_with?: String;
  subject_not_ends_with?: String;
  body?: String;
  body_not?: String;
  body_in?: String[] | String;
  body_not_in?: String[] | String;
  body_lt?: String;
  body_lte?: String;
  body_gt?: String;
  body_gte?: String;
  body_contains?: String;
  body_not_contains?: String;
  body_starts_with?: String;
  body_not_starts_with?: String;
  body_ends_with?: String;
  body_not_ends_with?: String;
  AND?: ServiceMessageScalarWhereInput[] | ServiceMessageScalarWhereInput;
  OR?: ServiceMessageScalarWhereInput[] | ServiceMessageScalarWhereInput;
  NOT?: ServiceMessageScalarWhereInput[] | ServiceMessageScalarWhereInput;
}

export interface ServiceMessageUpdateManyWithWhereNestedInput {
  where: ServiceMessageScalarWhereInput;
  data: ServiceMessageUpdateManyDataInput;
}

export interface ServiceMessageUpdateManyDataInput {
  subject?: String;
  body?: String;
}

export interface UserUpsertWithoutAppointmentsInput {
  update: UserUpdateWithoutAppointmentsDataInput;
  create: UserCreateWithoutAppointmentsInput;
}

export interface AppointmentUpsertWithWhereUniqueWithoutServiceInput {
  where: AppointmentWhereUniqueInput;
  update: AppointmentUpdateWithoutServiceDataInput;
  create: AppointmentCreateWithoutServiceInput;
}

export interface DoctorUpsertWithoutRecievedMessagesInput {
  update: DoctorUpdateWithoutRecievedMessagesDataInput;
  create: DoctorCreateWithoutRecievedMessagesInput;
}

export interface ClientMessageUpsertWithWhereUniqueWithoutSenderInput {
  where: ClientMessageWhereUniqueInput;
  update: ClientMessageUpdateWithoutSenderDataInput;
  create: ClientMessageCreateWithoutSenderInput;
}

export interface UserUpsertWithoutRecievedMessagesInput {
  update: UserUpdateWithoutRecievedMessagesDataInput;
  create: UserCreateWithoutRecievedMessagesInput;
}

export interface ServiceMessageUpsertWithWhereUniqueWithoutSenderInput {
  where: ServiceMessageWhereUniqueInput;
  update: ServiceMessageUpdateWithoutSenderDataInput;
  create: ServiceMessageCreateWithoutSenderInput;
}

export interface DoctorUpsertWithoutAppointmentsInput {
  update: DoctorUpdateWithoutAppointmentsDataInput;
  create: DoctorCreateWithoutAppointmentsInput;
}

export interface AppointmentUpdateManyMutationInput {
  clientName?: String;
  title?: String;
  startTime?: String;
  endTime?: String;
  duration?: AppointmentDuration;
  local?: Boolean;
  createdTime?: String;
}

export interface ClientMessageCreateInput {
  sender: UserCreateOneWithoutSentMessagesInput;
  reciever: DoctorCreateOneWithoutRecievedMessagesInput;
  subject: String;
  body: String;
}

export interface ClientMessageUpdateInput {
  sender?: UserUpdateOneRequiredWithoutSentMessagesInput;
  reciever?: DoctorUpdateOneRequiredWithoutRecievedMessagesInput;
  subject?: String;
  body?: String;
}

export interface ClientMessageUpdateManyMutationInput {
  subject?: String;
  body?: String;
}

export interface DoctorCreateInput {
  fullName: String;
  Bio?: String;
  email: String;
  password: String;
  age?: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  appointments?: AppointmentCreateManyWithoutServiceInput;
  specialty: DoctorSpecialty;
  sentMessages?: ServiceMessageCreateManyWithoutSenderInput;
  recievedMessages?: ClientMessageCreateManyWithoutRecieverInput;
}

export interface DoctorUpdateInput {
  fullName?: String;
  Bio?: String;
  email?: String;
  password?: String;
  age?: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  appointments?: AppointmentUpdateManyWithoutServiceInput;
  specialty?: DoctorSpecialty;
  sentMessages?: ServiceMessageUpdateManyWithoutSenderInput;
  recievedMessages?: ClientMessageUpdateManyWithoutRecieverInput;
}

export interface DoctorUpdateManyMutationInput {
  fullName?: String;
  Bio?: String;
  email?: String;
  password?: String;
  age?: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  specialty?: DoctorSpecialty;
}

export interface ServiceMessageCreateInput {
  sender: DoctorCreateOneWithoutSentMessagesInput;
  reciever: UserCreateOneWithoutRecievedMessagesInput;
  subject: String;
  body: String;
}

export interface ServiceMessageUpdateInput {
  sender?: DoctorUpdateOneRequiredWithoutSentMessagesInput;
  reciever?: UserUpdateOneRequiredWithoutRecievedMessagesInput;
  subject?: String;
  body?: String;
}

export interface ServiceMessageUpdateManyMutationInput {
  subject?: String;
  body?: String;
}

export interface UserCreateInput {
  fullName: String;
  email: String;
  password: String;
  age: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  confirmation?: Boolean;
  Appointments?: AppointmentCreateManyWithoutClientInput;
  sentMessages?: ClientMessageCreateManyWithoutSenderInput;
  recievedMessages?: ServiceMessageCreateManyWithoutRecieverInput;
}

export interface UserUpdateInput {
  fullName?: String;
  email?: String;
  password?: String;
  age?: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  confirmation?: Boolean;
  Appointments?: AppointmentUpdateManyWithoutClientInput;
  sentMessages?: ClientMessageUpdateManyWithoutSenderInput;
  recievedMessages?: ServiceMessageUpdateManyWithoutRecieverInput;
}

export interface UserUpdateManyMutationInput {
  fullName?: String;
  email?: String;
  password?: String;
  age?: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  confirmation?: Boolean;
}

export interface AppointmentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AppointmentWhereInput;
  AND?: AppointmentSubscriptionWhereInput[] | AppointmentSubscriptionWhereInput;
  OR?: AppointmentSubscriptionWhereInput[] | AppointmentSubscriptionWhereInput;
  NOT?: AppointmentSubscriptionWhereInput[] | AppointmentSubscriptionWhereInput;
}

export interface ClientMessageSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ClientMessageWhereInput;
  AND?:
    | ClientMessageSubscriptionWhereInput[]
    | ClientMessageSubscriptionWhereInput;
  OR?:
    | ClientMessageSubscriptionWhereInput[]
    | ClientMessageSubscriptionWhereInput;
  NOT?:
    | ClientMessageSubscriptionWhereInput[]
    | ClientMessageSubscriptionWhereInput;
}

export interface DoctorSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DoctorWhereInput;
  AND?: DoctorSubscriptionWhereInput[] | DoctorSubscriptionWhereInput;
  OR?: DoctorSubscriptionWhereInput[] | DoctorSubscriptionWhereInput;
  NOT?: DoctorSubscriptionWhereInput[] | DoctorSubscriptionWhereInput;
}

export interface ServiceMessageSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ServiceMessageWhereInput;
  AND?:
    | ServiceMessageSubscriptionWhereInput[]
    | ServiceMessageSubscriptionWhereInput;
  OR?:
    | ServiceMessageSubscriptionWhereInput[]
    | ServiceMessageSubscriptionWhereInput;
  NOT?:
    | ServiceMessageSubscriptionWhereInput[]
    | ServiceMessageSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Appointment {
  id: ID_Output;
  clientName?: String;
  title?: String;
  startTime: String;
  endTime: String;
  duration: AppointmentDuration;
  local: Boolean;
  createdTime: String;
}

export interface AppointmentPromise extends Promise<Appointment>, Fragmentable {
  id: () => Promise<ID_Output>;
  service: <T = DoctorPromise>() => T;
  client: <T = UserPromise>() => T;
  clientName: () => Promise<String>;
  title: () => Promise<String>;
  startTime: () => Promise<String>;
  endTime: () => Promise<String>;
  duration: () => Promise<AppointmentDuration>;
  local: () => Promise<Boolean>;
  createdTime: () => Promise<String>;
}

export interface AppointmentSubscription
  extends Promise<AsyncIterator<Appointment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  service: <T = DoctorSubscription>() => T;
  client: <T = UserSubscription>() => T;
  clientName: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  startTime: () => Promise<AsyncIterator<String>>;
  endTime: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<AppointmentDuration>>;
  local: () => Promise<AsyncIterator<Boolean>>;
  createdTime: () => Promise<AsyncIterator<String>>;
}

export interface Doctor {
  id: ID_Output;
  fullName: String;
  Bio?: String;
  email: String;
  password: String;
  age?: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  specialty: DoctorSpecialty;
}

export interface DoctorPromise extends Promise<Doctor>, Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  Bio: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  age: () => Promise<Int>;
  phone: () => Promise<Int>;
  gender: () => Promise<Gender>;
  avatar: () => Promise<String>;
  appointments: <T = FragmentableArray<Appointment>>(
    args?: {
      where?: AppointmentWhereInput;
      orderBy?: AppointmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  specialty: () => Promise<DoctorSpecialty>;
  sentMessages: <T = FragmentableArray<ServiceMessage>>(
    args?: {
      where?: ServiceMessageWhereInput;
      orderBy?: ServiceMessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  recievedMessages: <T = FragmentableArray<ClientMessage>>(
    args?: {
      where?: ClientMessageWhereInput;
      orderBy?: ClientMessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface DoctorSubscription
  extends Promise<AsyncIterator<Doctor>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  Bio: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  phone: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  avatar: () => Promise<AsyncIterator<String>>;
  appointments: <T = Promise<AsyncIterator<AppointmentSubscription>>>(
    args?: {
      where?: AppointmentWhereInput;
      orderBy?: AppointmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  specialty: () => Promise<AsyncIterator<DoctorSpecialty>>;
  sentMessages: <T = Promise<AsyncIterator<ServiceMessageSubscription>>>(
    args?: {
      where?: ServiceMessageWhereInput;
      orderBy?: ServiceMessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  recievedMessages: <T = Promise<AsyncIterator<ClientMessageSubscription>>>(
    args?: {
      where?: ClientMessageWhereInput;
      orderBy?: ClientMessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ServiceMessage {
  id: ID_Output;
  subject: String;
  body: String;
}

export interface ServiceMessagePromise
  extends Promise<ServiceMessage>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sender: <T = DoctorPromise>() => T;
  reciever: <T = UserPromise>() => T;
  subject: () => Promise<String>;
  body: () => Promise<String>;
}

export interface ServiceMessageSubscription
  extends Promise<AsyncIterator<ServiceMessage>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sender: <T = DoctorSubscription>() => T;
  reciever: <T = UserSubscription>() => T;
  subject: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  fullName: String;
  email: String;
  password: String;
  age: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  confirmation: Boolean;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  age: () => Promise<Int>;
  phone: () => Promise<Int>;
  gender: () => Promise<Gender>;
  avatar: () => Promise<String>;
  confirmation: () => Promise<Boolean>;
  Appointments: <T = FragmentableArray<Appointment>>(
    args?: {
      where?: AppointmentWhereInput;
      orderBy?: AppointmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  sentMessages: <T = FragmentableArray<ClientMessage>>(
    args?: {
      where?: ClientMessageWhereInput;
      orderBy?: ClientMessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  recievedMessages: <T = FragmentableArray<ServiceMessage>>(
    args?: {
      where?: ServiceMessageWhereInput;
      orderBy?: ServiceMessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  phone: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  avatar: () => Promise<AsyncIterator<String>>;
  confirmation: () => Promise<AsyncIterator<Boolean>>;
  Appointments: <T = Promise<AsyncIterator<AppointmentSubscription>>>(
    args?: {
      where?: AppointmentWhereInput;
      orderBy?: AppointmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  sentMessages: <T = Promise<AsyncIterator<ClientMessageSubscription>>>(
    args?: {
      where?: ClientMessageWhereInput;
      orderBy?: ClientMessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  recievedMessages: <T = Promise<AsyncIterator<ServiceMessageSubscription>>>(
    args?: {
      where?: ServiceMessageWhereInput;
      orderBy?: ServiceMessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ClientMessage {
  id: ID_Output;
  subject: String;
  body: String;
}

export interface ClientMessagePromise
  extends Promise<ClientMessage>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sender: <T = UserPromise>() => T;
  reciever: <T = DoctorPromise>() => T;
  subject: () => Promise<String>;
  body: () => Promise<String>;
}

export interface ClientMessageSubscription
  extends Promise<AsyncIterator<ClientMessage>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sender: <T = UserSubscription>() => T;
  reciever: <T = DoctorSubscription>() => T;
  subject: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
}

export interface AppointmentConnection {
  pageInfo: PageInfo;
  edges: AppointmentEdge[];
}

export interface AppointmentConnectionPromise
  extends Promise<AppointmentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AppointmentEdge>>() => T;
  aggregate: <T = AggregateAppointmentPromise>() => T;
}

export interface AppointmentConnectionSubscription
  extends Promise<AsyncIterator<AppointmentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AppointmentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAppointmentSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AppointmentEdge {
  node: Appointment;
  cursor: String;
}

export interface AppointmentEdgePromise
  extends Promise<AppointmentEdge>,
    Fragmentable {
  node: <T = AppointmentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AppointmentEdgeSubscription
  extends Promise<AsyncIterator<AppointmentEdge>>,
    Fragmentable {
  node: <T = AppointmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAppointment {
  count: Int;
}

export interface AggregateAppointmentPromise
  extends Promise<AggregateAppointment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAppointmentSubscription
  extends Promise<AsyncIterator<AggregateAppointment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ClientMessageConnection {
  pageInfo: PageInfo;
  edges: ClientMessageEdge[];
}

export interface ClientMessageConnectionPromise
  extends Promise<ClientMessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClientMessageEdge>>() => T;
  aggregate: <T = AggregateClientMessagePromise>() => T;
}

export interface ClientMessageConnectionSubscription
  extends Promise<AsyncIterator<ClientMessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClientMessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClientMessageSubscription>() => T;
}

export interface ClientMessageEdge {
  node: ClientMessage;
  cursor: String;
}

export interface ClientMessageEdgePromise
  extends Promise<ClientMessageEdge>,
    Fragmentable {
  node: <T = ClientMessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClientMessageEdgeSubscription
  extends Promise<AsyncIterator<ClientMessageEdge>>,
    Fragmentable {
  node: <T = ClientMessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateClientMessage {
  count: Int;
}

export interface AggregateClientMessagePromise
  extends Promise<AggregateClientMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClientMessageSubscription
  extends Promise<AsyncIterator<AggregateClientMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DoctorConnection {
  pageInfo: PageInfo;
  edges: DoctorEdge[];
}

export interface DoctorConnectionPromise
  extends Promise<DoctorConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DoctorEdge>>() => T;
  aggregate: <T = AggregateDoctorPromise>() => T;
}

export interface DoctorConnectionSubscription
  extends Promise<AsyncIterator<DoctorConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DoctorEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDoctorSubscription>() => T;
}

export interface DoctorEdge {
  node: Doctor;
  cursor: String;
}

export interface DoctorEdgePromise extends Promise<DoctorEdge>, Fragmentable {
  node: <T = DoctorPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DoctorEdgeSubscription
  extends Promise<AsyncIterator<DoctorEdge>>,
    Fragmentable {
  node: <T = DoctorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDoctor {
  count: Int;
}

export interface AggregateDoctorPromise
  extends Promise<AggregateDoctor>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDoctorSubscription
  extends Promise<AsyncIterator<AggregateDoctor>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ServiceMessageConnection {
  pageInfo: PageInfo;
  edges: ServiceMessageEdge[];
}

export interface ServiceMessageConnectionPromise
  extends Promise<ServiceMessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceMessageEdge>>() => T;
  aggregate: <T = AggregateServiceMessagePromise>() => T;
}

export interface ServiceMessageConnectionSubscription
  extends Promise<AsyncIterator<ServiceMessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ServiceMessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateServiceMessageSubscription>() => T;
}

export interface ServiceMessageEdge {
  node: ServiceMessage;
  cursor: String;
}

export interface ServiceMessageEdgePromise
  extends Promise<ServiceMessageEdge>,
    Fragmentable {
  node: <T = ServiceMessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceMessageEdgeSubscription
  extends Promise<AsyncIterator<ServiceMessageEdge>>,
    Fragmentable {
  node: <T = ServiceMessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateServiceMessage {
  count: Int;
}

export interface AggregateServiceMessagePromise
  extends Promise<AggregateServiceMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceMessageSubscription
  extends Promise<AsyncIterator<AggregateServiceMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AppointmentSubscriptionPayload {
  mutation: MutationType;
  node: Appointment;
  updatedFields: String[];
  previousValues: AppointmentPreviousValues;
}

export interface AppointmentSubscriptionPayloadPromise
  extends Promise<AppointmentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AppointmentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AppointmentPreviousValuesPromise>() => T;
}

export interface AppointmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AppointmentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AppointmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AppointmentPreviousValuesSubscription>() => T;
}

export interface AppointmentPreviousValues {
  id: ID_Output;
  clientName?: String;
  title?: String;
  startTime: String;
  endTime: String;
  duration: AppointmentDuration;
  local: Boolean;
  createdTime: String;
}

export interface AppointmentPreviousValuesPromise
  extends Promise<AppointmentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  clientName: () => Promise<String>;
  title: () => Promise<String>;
  startTime: () => Promise<String>;
  endTime: () => Promise<String>;
  duration: () => Promise<AppointmentDuration>;
  local: () => Promise<Boolean>;
  createdTime: () => Promise<String>;
}

export interface AppointmentPreviousValuesSubscription
  extends Promise<AsyncIterator<AppointmentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  clientName: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  startTime: () => Promise<AsyncIterator<String>>;
  endTime: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<AppointmentDuration>>;
  local: () => Promise<AsyncIterator<Boolean>>;
  createdTime: () => Promise<AsyncIterator<String>>;
}

export interface ClientMessageSubscriptionPayload {
  mutation: MutationType;
  node: ClientMessage;
  updatedFields: String[];
  previousValues: ClientMessagePreviousValues;
}

export interface ClientMessageSubscriptionPayloadPromise
  extends Promise<ClientMessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClientMessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClientMessagePreviousValuesPromise>() => T;
}

export interface ClientMessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClientMessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClientMessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClientMessagePreviousValuesSubscription>() => T;
}

export interface ClientMessagePreviousValues {
  id: ID_Output;
  subject: String;
  body: String;
}

export interface ClientMessagePreviousValuesPromise
  extends Promise<ClientMessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  subject: () => Promise<String>;
  body: () => Promise<String>;
}

export interface ClientMessagePreviousValuesSubscription
  extends Promise<AsyncIterator<ClientMessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  subject: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
}

export interface DoctorSubscriptionPayload {
  mutation: MutationType;
  node: Doctor;
  updatedFields: String[];
  previousValues: DoctorPreviousValues;
}

export interface DoctorSubscriptionPayloadPromise
  extends Promise<DoctorSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DoctorPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DoctorPreviousValuesPromise>() => T;
}

export interface DoctorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DoctorSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DoctorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DoctorPreviousValuesSubscription>() => T;
}

export interface DoctorPreviousValues {
  id: ID_Output;
  fullName: String;
  Bio?: String;
  email: String;
  password: String;
  age?: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  specialty: DoctorSpecialty;
}

export interface DoctorPreviousValuesPromise
  extends Promise<DoctorPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  Bio: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  age: () => Promise<Int>;
  phone: () => Promise<Int>;
  gender: () => Promise<Gender>;
  avatar: () => Promise<String>;
  specialty: () => Promise<DoctorSpecialty>;
}

export interface DoctorPreviousValuesSubscription
  extends Promise<AsyncIterator<DoctorPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  Bio: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  phone: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  avatar: () => Promise<AsyncIterator<String>>;
  specialty: () => Promise<AsyncIterator<DoctorSpecialty>>;
}

export interface ServiceMessageSubscriptionPayload {
  mutation: MutationType;
  node: ServiceMessage;
  updatedFields: String[];
  previousValues: ServiceMessagePreviousValues;
}

export interface ServiceMessageSubscriptionPayloadPromise
  extends Promise<ServiceMessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServiceMessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServiceMessagePreviousValuesPromise>() => T;
}

export interface ServiceMessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceMessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceMessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServiceMessagePreviousValuesSubscription>() => T;
}

export interface ServiceMessagePreviousValues {
  id: ID_Output;
  subject: String;
  body: String;
}

export interface ServiceMessagePreviousValuesPromise
  extends Promise<ServiceMessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  subject: () => Promise<String>;
  body: () => Promise<String>;
}

export interface ServiceMessagePreviousValuesSubscription
  extends Promise<AsyncIterator<ServiceMessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  subject: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  fullName: String;
  email: String;
  password: String;
  age: Int;
  phone?: Int;
  gender?: Gender;
  avatar?: String;
  confirmation: Boolean;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  age: () => Promise<Int>;
  phone: () => Promise<Int>;
  gender: () => Promise<Gender>;
  avatar: () => Promise<String>;
  confirmation: () => Promise<Boolean>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  phone: () => Promise<AsyncIterator<Int>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  avatar: () => Promise<AsyncIterator<String>>;
  confirmation: () => Promise<AsyncIterator<Boolean>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Doctor",
    embedded: false
  },
  {
    name: "Appointment",
    embedded: false
  },
  {
    name: "AppointmentDuration",
    embedded: false
  },
  {
    name: "Gender",
    embedded: false
  },
  {
    name: "DoctorSpecialty",
    embedded: false
  },
  {
    name: "ClientMessage",
    embedded: false
  },
  {
    name: "ServiceMessage",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
